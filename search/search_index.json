{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AppSec Portal","text":"<p>Welcome to Equinor AppSec information pages. This site is primarily written by and for the people working with building/maintaining applications in Equinor, but could also function as a resource for others on the topic of application security.</p>"},{"location":"#appsec-toolbox","title":"AppSec Toolbox","text":"<p>Guidelines, tools and tips, brought to you by the AppSec team.</p>"},{"location":"#security-champion","title":"Security Champion","text":"<p>Information about the Security Champion programme in Equinor. This site contains guidelines and information for Security Champions </p>"},{"location":"#snyk-guidelines","title":"Snyk Guidelines","text":"<p>The guidelines contain information related to how to set up Snyk for security scanning of repos, and also other guidelines related to licenses and other topics.</p>"},{"location":"#threat-modeling","title":"Threat Modeling","text":"<p>Here you can find some information about threat modeling, as well as information about how to get started and what resources the AppSec-team can provide.</p>"},{"location":"about/","title":"Objectives and activities","text":""},{"location":"about/#background-why","title":"Background - (Why)","text":"<p>Always safe is one of three pillar in the Equinor strategy. Safety in the digital world includes cyber security. Equinor has many software development teams (internals and partners) and we expect a growth in DevOps teams in the future. Modern software development adopts all aspects of cloud capabilities and thus there is also an increased information security and privacy risk.</p> <p>The purpose of the AppSec team is to reduce cyber security risk in Equinor's SDLC - Software Development Life Cycle (DevOps teams).</p> <p>The primary target audience for the team is Equinor's software development community - aka. DevOps teams.</p>"},{"location":"about/#main-objectives-how","title":"Main objectives - (How)","text":"<ul> <li>Enable DevOps teams so they can reduce cyber security risks for software developed and operated by Equinor.</li> <li>Enable \"shift-left\" of security responsibility, meaning put developers in front, responsible for their application security. Striking the right balance between centralisation and teams responsibility is crucial.</li> <li>Competence building, strengthen the community of practice, provide hands-on help and tools for Equinor's DevOps teams.</li> <li>Focus on software development in general and primarily development for utilising cloud. (Cloud native principles and practices.)</li> <li>Work actively to create a good security culture for software development teams in Equinor.</li> <li>Work in close relationship with the IT Professional network. Leading Advisor for Security in Software Engineering is a key stakeholder and a member of the ISC AppSec team.</li> </ul>"},{"location":"about/#activities-what","title":"Activities - (What)","text":"<ul> <li>Training/build competence - Develop a curriculum covering \"Secure Software Development / Applicaton Security\" topics and provide training to Equinor's DevOps teams</li> <li>Engage, train and offer threat modelling for DevOps teams</li> <li>Practical hands-on help in Application Security/Secure Software Development - all aspects of the SDLC</li> <li>Measurements - Assessments of Application Security/Secure Software Development</li> <li>Build a community for Application Security, including security champions in Equinor DevOps teams</li> <li>Perform security testing - (tooling, automation, alignment with CSIRT/SOC)</li> <li>Host and maintain a library of \"best practices\" and examples</li> <li>Explore options on how to secure our development supply chain (e.g. Mandatory Equinor hubs and package repositories) - product owner for these solutions.</li> <li>Operate tools related to secure software development (e.g. Software Composition Analysis, Open Source Compliance, Static Code Analysis, Dynamic Code Analysis, Vulnerability scanning +++)</li> </ul>"},{"location":"about/privacy/","title":"Privacy Policy","text":"<p>This site utilizes Application Insights to log information regarding site and page usage. The purpose of the data collection is to assess the impact and reach of the content we create. By using this site, we assume your implicit consent to our privacy policy.</p> <ul> <li>The data collected are protected and only accessible to the Application Security (AppSec) Team.</li> <li>Data retention periods are 30 or 90 days, depending on the type of data.</li> <li>We do not share the data with third parties.</li> <li>We do not use cookies to collect data that trace users and sessions.</li> </ul>"},{"location":"about/privacy/#information-we-collect","title":"Information We Collect","text":"<ul> <li>IP addresses</li> <li>Browser capability data</li> <li>Processing and page load metrics</li> <li>URLs and page views</li> </ul>"},{"location":"about/privacy/#technical","title":"Technical","text":"<p>You can analyze the data collected by using your browser's \"developer tools\" and examining POST requests to <code>https://northeurope-2.in.applicationinsights.azure.com/v2/track</code>.</p> <p>For any concerns, please read our security.md.</p>"},{"location":"experimental/git-signed-commits-old/","title":"\ud83d\udd0f Git Signed Commits: A Guide for Proper Folks Who Ain\u2019t Raised by Wolves \ud83e\uddd0","text":"<p>Now gather \u2018round, you young scallywags, and let an old hand set you straight. Back in my day, a man\u2019s word was his bond, and a signature was as good as gold. Nowadays, any two-bit scoundrel with a typewriter hooked up to a lightning machine can go fiddlin\u2019 with your code, impersonatin\u2019 honest folk, and muckin\u2019 things up faster than a hog in a henhouse. \ud83d\udca8  </p> <p>That\u2019s why you gotta sign your Git commits, just like an honest citizen signs a check down at the bank. \ud83c\udfe6  </p> <p>If you don\u2019t, well\u2026 don\u2019t come cryin\u2019 when some rascal tampers with your code and the whole shebang crumbles like a biscuit in hot coffee. \u2615\ud83c\udf6a  </p>"},{"location":"experimental/git-signed-commits-old/#the-rules-and-you-better-follow-em-yhear","title":"\ud83d\udcdc The Rules (And You Better Follow \u2018Em, Y\u2019hear?)","text":"<p>\u2705 Sign every Git commit you make. A commit without a signature is like a contract written in invisible ink\u2014ain\u2019t worth a plugged nickel. \ud83d\udcb0  </p> <p>\u2705 Use SSH keys with a passphrase. That\u2019s a password, son. And make it a good one. \"123456\" ain\u2019t a passphrase, it\u2019s an invitation for hooligans.  </p> <p>\u2705 Keep separate keys for signin\u2019 and loggin\u2019 in. You wouldn\u2019t use the same key for your house and your barn, would ya? </p> <p>\u2705 Make sure your branch rules require signed commits. Otherwise, you might as well leave your front door wide open and hope the raccoons don\u2019t move in.</p> <p>\u2705 GitHub Codespaces might sign commits for ya, but don\u2019t trust it more than your own two hands. Machines are tricky little devils, and you never know when one\u2019s gonna go haywire. \ud83e\udd16\ud83d\udd25  </p>"},{"location":"experimental/git-signed-commits-old/#ssh-key-signing-the-best-way-for-most-folks","title":"\ud83d\udd10 SSH Key Signing (The Best Way for Most Folks)","text":""},{"location":"experimental/git-signed-commits-old/#1-generate-a-signing-ssh-key","title":"1. \ud83d\udee0\ufe0f Generate a Signing SSH Key","text":"<p>Open up your terminal and generate a dedicated SSH key just for signing your Git commits:</p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/git_ssh_signing_key_1 -C \"Created on &lt;date&gt;, for [your_username] on github.com\"\n</code></pre> <p>Make sure to give it a good passphrase, not something like password123. A weak passphrase is like lockin\u2019 your door with a shoelace.</p>"},{"location":"experimental/git-signed-commits-old/#2-add-the-key-to-your-ssh-agent","title":"2. \ud83e\udde0 Add the Key to Your SSH Agent","text":"<p>To save yourself from typing the passphrase every time, add the key to your SSH agent:</p> <pre><code>ssh-add ~/.ssh/git_ssh_signing_key_1\n</code></pre>"},{"location":"experimental/git-signed-commits-old/#3-tell-git-to-use-this-key-for-signing","title":"3. \ud83e\uddfe Tell Git to Use This Key for Signing","text":"<p>Git\u2019s like a mule\u2014it only listens when you speak plain. So tell it exactly what to do:</p> <pre><code>git config --global gpg.format ssh\ngit config --global user.signingkey ~/.ssh/git_ssh_signing_key_1.pub\ngit config --global commit.gpgsign true\n</code></pre> <p>Now Git will sign your commits automatically, no fuss, no muss. </p>"},{"location":"experimental/git-signed-commits-old/#4-check-that-your-commits-are-signed","title":"4. \ud83d\udd0d Check That Your Commits Are Signed","text":"<p>To make sure it\u2019s working and you didn\u2019t fat-finger anything, run this:</p> <pre><code>git log --show-signature\n</code></pre> <p>If it shows your signature, you did it right. If not, go back and double-check your setup. \ud83c\udfa9</p>"},{"location":"experimental/git-signed-commits-old/#5-add-your-public-signing-key-to-github","title":"5. \ud83d\udddd\ufe0f Add Your Public Signing Key to GitHub","text":"<p>GitHub ain\u2019t a mind reader. You\u2019ve got to tell it about your key.</p> <p>First, get your public key:</p> <pre><code>cat ~/.ssh/git_ssh_signing_key_1.pub\n</code></pre>"},{"location":"experimental/git-signed-commits-old/#6-require-signed-commits-on-protected-branches-optional-but-smart","title":"6. \ud83d\udeaa Require Signed Commits on Protected Branches (Optional but Smart)","text":"<p>To keep your project clean and avoid unwanted shenanigans, enforce signed commits:</p> <ol> <li>Go to your GitHub repository </li> <li>Navigate to Settings \u2192 Branches </li> <li>Under Branch protection rules, click Add rule </li> <li>Select your main branch (usually <code>main</code> or <code>master</code>)  </li> <li>Check Require signed commits</li> </ol> <p>Now only signed commits can get through, like a proper gated community. \ud83d\udea7  </p>"},{"location":"experimental/git-signed-commits-old/#final-words-from-an-old-timer-whos-seen-some-things","title":"\ud83c\udfa4 Final Words from an Old-Timer Who\u2019s Seen Some Things","text":"<p>Now listen, I ain\u2019t sayin\u2019 you gotta follow these rules. You\u2019re a grown person, you can do what you want. But if you don\u2019t sign your commits, don\u2019t come bellyachin\u2019 when some no-good scoundrel impersonates you and sneaks nonsense into your project. \ud83c\udfad  </p> <p>Back in my day, we didn\u2019t have none of this \"Git\" business. We wrote our code by hand, uphill both ways, in the snow, and we liked it! \ud83d\udcdd But if we had Git, you better believe we\u2019d sign our work. </p> <p>So quit yer lollygaggin\u2019, set up signed commits, and keep your code cleaner than a Sunday suit. \ud83d\udc54  </p> <p>Or don\u2019t. But don\u2019t come cryin\u2019 when your project turns into a three-ring circus. \ud83c\udfaa  </p>"},{"location":"experimental/git-signed-commits-young/","title":"\ud83d\udd25 Yo, Code Warriors! \ud83e\uddd1\u200d\ud83d\udcbb Let's Get Sigma with Signed Commits! \ud83e\uddb8\u200d\u2642\ufe0f","text":"<p>Alright, fam, it's time to level up your coding game and flex those sigma vibes. \ud83d\udcaa You know, being that lone wolf \ud83d\udc3a who's got everything under control without breaking a sweat. Let's dive into why signing your commits is the ultimate sigma move and how to do it. \ud83d\ude80  </p>"},{"location":"experimental/git-signed-commits-young/#why-signing-your-commits-is-pure-sigma-energy","title":"Why Signing Your Commits is Pure Sigma Energy","text":"<ul> <li> <p>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Identity Flex (No Impostors Allowed)   Signing your commits is like stamping your unique seal of approval. It confirms that you made the changes, blocking any wannabe impostors from sneaking in malicious code.  </p> </li> <li> <p>\ud83d\udd12 Code Integrity = Sigma Grindset   A signed commit ensures your code remains untouched from the moment you commit. If anyone tries to mess with it afterward, the signature breaks, throwing up red flags.  </p> </li> <li> <p>\ud83d\udeab\ud83d\udd01 No Replay Shenanigans (Stay Ahead of the Game)   Signed commits stop attackers from reusing your legit commits in shady contexts, maintaining the flow and context of your code history.  </p> </li> <li> <p>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Audit Like a Boss (Keep It 100)   With signed commits, tracking changes becomes a breeze, making audits smoother than a fresh jar of Skippy.  </p> </li> <li> <p>\ud83c\udf1f Boosting Street Cred (Trust &amp; Compliance)   For projects with strict standards, signed commits show you're playing by the rules, building trust among your crew and users.  </p> </li> </ul>"},{"location":"experimental/git-signed-commits-young/#how-to-sign-your-commits-and-embrace-the-sigma-lifestyle","title":"How to Sign Your Commits and Embrace the Sigma Lifestyle","text":""},{"location":"experimental/git-signed-commits-young/#step-1-generate-your-ssh-key","title":"\ud83d\udee0\ufe0f Step 1: Generate Your SSH Key","text":"<p>Fire up your terminal and punch in:  </p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/git_ssh_signing_key_1 -C \"Created on $(date), for $(whoami) on github.com\" \n</code></pre> <p>This crafts a fresh SSH key for signing.</p> <p>\ud83d\udca1 Pro tip: Add a passphrase. Don\u2019t be that person who skips security.  </p>"},{"location":"experimental/git-signed-commits-young/#step-2-add-your-key-to-the-ssh-agent","title":"\ud83d\udee0\ufe0f Step 2: Add Your Key to the SSH Agent \ud83e\udd16","text":"<p>Alright, so you've got your fancy new SSH key, but let's be real\u2014typing your passphrase every time? That's LAME. Ain't nobody got time for that.  </p> <p>So let\u2019s make your system remember your key like a goldfish with a 500 IQ \ud83e\udde0\ud83d\udc20:</p> <pre><code>ssh-add ~/.ssh/git_ssh_signing_key_1\n</code></pre> <p>Now your key is locked in \ud83d\udd10, and you can commit like an absolute Chad without re-entering your passphrase every 2 seconds.</p> <p>Big W. \u2705</p>"},{"location":"experimental/git-signed-commits-young/#step-3-tell-git-to-use-your-new-key","title":"\ud83c\udff4\u200d\u2620\ufe0f Step 3: Tell Git to Use Your New Key","text":"<p>Yo, Git ain't psychic\u2014you gotta tell it to start using that top-tier SSH key.  </p> <p>Hit it with this:  </p> <pre><code>git config --global gpg.format ssh\ngit config --global user.signingkey ~/.ssh/git_ssh_signing_key_1.pub\ngit config --global commit.gpgsign true\n</code></pre> <p>This is like giving Git a treasure map \ud83c\udff4\u200d\u2620\ufe0f so it knows where to find your key.</p> <p>Now every commit is gonna be signed like a true security giga-brain. \ud83d\udd25</p>"},{"location":"experimental/git-signed-commits-young/#step-4-drop-that-key-into-github-gotta-let-the-squad-know","title":"\ud83d\udd11 Step 4: Drop That Key into GitHub (Gotta Let the Squad Know)","text":"<p>Your key is ready, but GitHub doesn\u2019t know you like that yet. </p> <p>So let\u2019s make it official:  </p> <pre><code>cat ~/.ssh/git_ssh_signing_key_1.pub\n</code></pre> <p>\u261d\ufe0f This command will spit out your public key. Copy that beautiful string of characters \u2728 and:</p> <p>\ud83d\udd17 Go to GitHub &gt; Settings &gt; SSH and GPG keys &gt; New SSH key</p> <p>\ud83d\udcbe Paste it in and save! BOOM. Now GitHub recognizes you like an old friend. \ud83d\ude0e</p>"},{"location":"experimental/git-signed-commits-young/#step-5-protect-your-branches-gatekeeping-but-in-a-good-way","title":"\ud83d\udea7 Step 5: Protect Your Branches (Gatekeeping, But in a Good Way)","text":"<p>Alright, now we set up branch protection to make sure NO UNSIGNED COMMITS GET IN. \u274c\ud83d\udd13  </p> <p>This is like putting a bouncer in front of your code, checking IDs before letting commits into the club. \ud83d\udd76\ufe0f\ud83d\udcaa  </p> <p>Set up branch protection rules so ONLY signed commits get through.</p> <p>No signature? \ud83d\udeab Access DENIED. </p>"},{"location":"experimental/git-signed-commits-young/#final-boss-move-always-sign-always-secure","title":"\ud83c\udfc6 Final Boss Move: Always Sign, Always Secure","text":"<p>Using signed commits isn\u2019t just cool, it\u2019s mandatory if you wanna keep your code safe.  </p> <p>Don\u2019t be that dev who gets caught slipping\u2014sign those commits and keep your repo locked down.  </p> <p>\ud83d\udcaf Secure devs are W devs. Now go sign those commits. \ud83d\ude80\ud83d\udd25  </p>"},{"location":"security-champion/","title":"What is a Security Champion","text":"<p>You are probably wondering what a Security Champion is in Equinor context and what you can expect if you join? Well then you are on the right track.</p> <p>A Security Champion in our context is a person who has a interest in security and want to expand on this interest. The Security Champions Network (SCN) is a network where people and security is in the center.</p> <p>Info</p> <p>You do not need to have any security knowledge to join, but the eagerness to learn and share</p>"},{"location":"security-champion/#what-do-we-expect-from-you","title":"What do we expect from you?","text":"<ul> <li>See something, say something. You are the voice of security, so please use it</li> <li>Join our coffees/seminars/meetups</li> <li>Share experiences, both good and bad</li> <li>Ask questions and be curious</li> <li>Respond to feedback requests</li> <li>Share what you learn with your team</li> </ul> <p>Info</p> <p>A Security Champion is the voice of security, and security is a team effort.</p> <p>You as a champion are the heart of this network. We know time might be tight, but we greatly appreciate all participation.</p>"},{"location":"security-champion/#what-can-you-expect","title":"What can you expect?","text":"<ul> <li>You get to take part in a community of like-minded people</li> <li>You can attend activities only catered to Security Champions</li> <li>You will help form this network, as your voice and your experiences matter</li> <li>You will get experiences and knowledge that might help advance your career</li> <li>Last but not least: Awesome merch!</li> </ul>"},{"location":"security-champion/#how-to-become-a-security-champion","title":"How to become a Security Champion?","text":"<p>Becoming a Security Champion is as easy as filling out this form.</p>"},{"location":"security-champion/1-new_security_champion/","title":"I've joined, now what?","text":""},{"location":"security-champion/1-new_security_champion/#welcome-young-padawan","title":"Welcome young padawan","text":"<p>This is where the fun begins.</p> <ul> <li>Join the #appsec channel on Slack</li> <li>You will get an invitation to the #security-champion channel within a few days</li> <li>Check out our activities</li> </ul> <p>Here's a puzzle for you :</p> <p>Get your gift by decoding this challenge - https://forms.microsoft.com/r/cLRPzRtPGQ</p>"},{"location":"security-champion/1-new_security_champion/#add-security-champion-events-to-your-calendar","title":"Add Security Champion events to your calendar","text":"<p>To check all events, and add them to your own calendar, go to your outlook calendar and select the Security Champion Calendar from group calendars:</p> <p></p> <p>Note: This option might not be available on Mac, if that is your case, another option is to use outlook through connectit to add the events.</p> <p>You can also find a calendar of events on SharePoint</p>"},{"location":"security-champion/1-new_security_champion/#relevant-slack-channels","title":"Relevant Slack channels","text":"<ul> <li>#Security-Champions: Your go-to channel for Security Champion events and information</li> <li>#AppSec: Information regarding AppSec</li> </ul> <p>Info</p> <p>#AppSec Most general information should be posted here so everyone in Equinor has access to it and can participate! Dropping a <code>@appsecteam</code> in this channel will get our attention immediately.</p>"},{"location":"security-champion/2-security_champion_activities/","title":"Security Champion Activities \ud83e\uddb8\u200d\u2640\ufe0f","text":""},{"location":"security-champion/2-security_champion_activities/#introduce-yourself","title":"Introduce yourself","text":"<p>Say hello in the Security Champion channel \ud83d\udc4b Always fun to meet new champions.</p>"},{"location":"security-champion/2-security_champion_activities/#ensure-that-all-your-code-is-being-scanned-by-sast","title":"Ensure that all your code is being scanned by SAST","text":"<p>Ensure all your projects code is scanned by Snyk, and that you have Snyk Code enabled for your projects. Using a linter is always good when you develop!</p>"},{"location":"security-champion/2-security_champion_activities/#check-out-our-guidelines","title":"Check out our guidelines","text":"<p>We have created a few guidelines. Please check them out in our toolbox and consider implementing them in your projects where it makes sense.</p> <p>Info</p> <p>Feedback is good, so if you have any, feel free to contact us, or even create a PR on our github repo!</p>"},{"location":"security-champion/2-security_champion_activities/#threat-modelling-activities","title":"Threat Modelling activities","text":"<p>We can organize introductory sessions to threat modelling, simply reach out to the <code>@appsecteam</code> on our Slack channel #appsec.</p> <ul> <li>Facilitate a threat modelling session with your team - looking at the high level architecture of your system(s)</li> <li>Introduce \"Abuser stories\" for all your tasks (ex add it some template you are using for detailing tasks)</li> </ul>"},{"location":"security-champion/2-security_champion_activities/#contribute-to-this-site","title":"Contribute to this site","text":"<p>As of now, a lot of the content on this site is written by the AppSec-team. This site is meant to be a resource for the Security Champion community, and thus contribution from the community is crucial for making this site useful.</p> <p>If you have anything to share that you think will be useful for others, don't hesitate. Same goes for editing the content that already exists.</p> <p>Just go to our github-repo and make a PR. Pro tip: You can use Visual Studio Code directly from your browser by pressing \".\" when you are on a page. Contributing has never been easier!</p>"},{"location":"security-champion/2-security_champion_activities/#have-the-team-work-through-the-owasp-juice-shop","title":"Have the team work through the OWASP Juice Shop","text":"<p>OWASP JuiceShop is a great resource for security training and getting familiar with OWASP Top Ten. There are many ways to utilize this project for training, with some of them being:</p> <ul> <li>Run it in CTF-mode, and agree on what challenges are to be solved during this sprint. At the end of the sprint, go through the challenges</li> <li>Set aside a couple of days for going through the challenges together</li> <li>Go though one challenge each stand-up</li> </ul>"},{"location":"security-champion/2-security_champion_activities/#check-out-the-owasp-asvs","title":"Check out the OWASP ASVS","text":"<p>OWASP ASVS is a collection of web application technical security controls and requirements. Have a look and see if this makes sense to use for your project :)</p>"},{"location":"security-champion/2-security_champion_activities/#manually-security-test-your-application","title":"Manually security test your application","text":"<p>Have a look at WSTG.</p>"},{"location":"security-champion/4-learning-platform/","title":"Secure Code Learning platform","text":"<p>We have a secure coding learning platform. You as a champion are a perfect match, and that is why you get special merch by learning!</p>"},{"location":"security-champion/4-learning-platform/#what-can-you-expect","title":"What can you expect?","text":"<ul> <li>Learning about security and secure coding in \"hands on\" sessions in a sandbox environment</li> <li>View video lessons</li> <li>Gain unique merch based off your belt level!</li> <li>Contribute to the SCN</li> <li>Have fun!</li> <li>Bragging rights</li> <li>Learn things that may help advance your career!</li> </ul> <p>Info</p> <p>You can gain unique merch based on your belt level!</p> <p>There is a wide arrangement of subjects, and you can do them all if you wish! So there are tracks for:</p> <ul> <li>AppSec</li> <li>Azure</li> <li>Docker security</li> <li>DevSecOps</li> <li>AI/LLM</li> <li>Data Scientist</li> <li>OWASP Mobile top 10 (ios/android)</li> <li>OWASP API top 10</li> <li>Web App Tester</li> <li>Web dev</li> <li>++</li> </ul> <p>Use this form to sign up for it! Happy learning!</p>"},{"location":"security-champion/4-learning-platform/#belts","title":"Belts","text":"<p>To read more on how we do belts and activities, check out the belt and activity section.</p>"},{"location":"security-champion/5-belts-and-activities/","title":"Belts and Activity system","text":"<p>We are launching a new activity system, previously only available to the learning platform users, now for the whole Security Champions Network!</p>"},{"location":"security-champion/5-belts-and-activities/#this-is-how-it-works","title":"This is how it works","text":""},{"location":"security-champion/5-belts-and-activities/#secure-code-learning-platform","title":"Secure Code learning platform","text":"<p>If you are using the Secure Code learning platform</p> <p>Nothing changes except where you register activities! It pays to learn, and you get to upskill your knowledge as well, Win Win!</p> <p>There are 5 belts you can achieve.<code>White</code>, <code>Yellow</code>, and <code>Green</code> belt are achievable from only learning through the platform. More on the merch you can get from the different belts here. The <code>brown</code> and <code>black</code> belts are something special. They require you to complete activities that give back to the Security Champion network.</p> <p> </p> <p>The <code>brown</code> and <code>black</code> belts are special and require you to complete activities normally in the Security Champion network. Check them out below!</p> <ul> <li>To start earning the <code>brown</code> belt: Complete the three belts from the learning platform (<code>white</code>, <code>yellow</code>, and <code>green</code>)</li> <li>To gain the <code>brown</code> belt: Complete <code>3</code> activities from the list below</li> <li>To gain the <code>black</code> belt: Complete <code>6</code> new activities, for a total of <code>9</code></li> </ul>"},{"location":"security-champion/5-belts-and-activities/#others","title":"Others","text":"<p>If you are not taking a part of the Secure Code learning platform, you need to do activities all the way. We want to promote the learning platform, so you should really test out the hands-on lessons! Each belt requires X amount of approved activities.</p>"},{"location":"security-champion/5-belts-and-activities/#activities-per-belt","title":"Activities per belt","text":"White Yellow Green Brown Black Total 1 2 3 4 5 15 <p>Ex: Yellow is <code>3</code> completed activities, <code>1</code> for <code>white</code>, <code>2</code> for <code>yellow</code></p>"},{"location":"security-champion/5-belts-and-activities/#registration","title":"Registration","text":"<p>The process for registration has been simplified! All you have to do is:</p> <ul> <li>Use this form</li> <li>List your activity and short about details so we know what we are approving (no sensitive information please)</li> <li>We will double-check, and if everything is A-OK, you get an e-mail!</li> </ul> <p>Info</p> <p>One activity is one submission.</p>"},{"location":"security-champion/5-belts-and-activities/#activities","title":"Activities","text":"<p>Please help contribute with useful activities that make sense in Equinor context for our Security Champions.</p> <ul> <li>Talk briefly about your project/challenges in regards to security in the Morning Coffee</li> <li>Facilitate a <code>Threat Modeling</code> session for your team/project</li> <li>Share a write-up of a <code>security activity</code> you/your team did on the AppSec Slack</li> <li>Speak at a seminar/meetup</li> <li>Have a Security Champion from another team join/review your <code>threat model</code></li> <li>Join/review another team's <code>threat model</code></li> <li>Attend a meetup</li> <li>Hold a security moment at a seminar/meetup</li> <li>Set up <code>Snyk</code> scanning for your repository</li> <li>Assess and address all issues in Snyk (achieve a 0-issue dashboard)</li> <li>Set up <code>Secret scanning</code> for your project using our guidelines</li> <li>Attend a Security Journey tournament <code>(learning platform)</code></li> <li>Gain three <code>white</code> belts <code>(learning platform)</code></li> <li>Gain two <code>yellow</code> belts <code>(learning platform)</code></li> <li>Gain two <code>green</code> belts <code>(learning platform)</code></li> <li>Go through a Security Journey task in the Morning Coffee <code>(learning platform)</code></li> </ul> <p>Note</p> <p>The list of activities will change based on your feedback.</p>"},{"location":"security-champion/6-merch/","title":"Merchandise","text":"<p>Merch is an important tool in building a security culture. We need to be visible, both the AppSec team and our champions to raise awareness to security. We also want to make being a Security Champion something to be proud of, and we are leveraging merch as one of the tools in order to manage this.</p> <p>As SCN age, we will have different merch come and go. Below we have a record of some of the selections we have given out. Some of them are out of stock, some are in stock, you never know! Should we get keep inventory? Probably...</p> <ul> <li><code>Stickers</code>: A large assortment of stickers to help show that you are the voice of security! With the number of stickers we have, you will get a proper workout while carrying your laptop</li> <li><code>Black Hoodie</code>: Display your black belt to everyone in the vicinity. You are a true champion</li> <li><code>Socks</code>: Socks decorated with The Security Champion shields! Would they have protected Achilles? Maybe not. Will they protect you from cyber criminals? Who knows! But you will certainly look stylish while being hacked!</li> <li><code>Book (Alice and Bob Learn Application Security)</code>: Complete the challenge at this form</li> <li><code>AbbSack</code>: You have to see it to believe it! Keep your items secure while traveling</li> <li><code>BallSec</code>: Those pesky attackers are giving you a lot of stress? Relieve it with your branded stress ball!</li> <li><code>Lanyard</code>: Start your belt journey to black belt here with a stylish card holder</li> <li><code>Pins</code>: Decorate your lanyard to display your belt level to the world</li> <li><code>Christmas ornament</code>: No Christmas tree is secure without your own Security Champion Christmas tree ornament. Is it because the christmas tree is offline? Most likely</li> <li><code>S.W.A.T. (Small Work Addictive Thing)</code>: the latest and freshest within fidget toy technology. Meetings will never be the same! This exists in multiple colors. Gotta cath'em all!</li> </ul>"},{"location":"security-champion/6-merch/#how-to-get-merch","title":"How to get merch","text":"<ul> <li>Getting belts through our secure code learning platform</li> <li>Attend gatherings arranged by the AppSec team</li> <li>Speak at a seminar to get a unique golden and black S.W.A.T.</li> <li>Talk to the AppSec team during conferences</li> <li>Doing good work (and tell about it), and maybe you'll get a kudos prize</li> </ul>"},{"location":"security-champion/6-merch/#merch-for-belts","title":"Merch for belts","text":"<p>Since we are launching a new belt system connected to the secure coding platform, we need fresh merch! Below is a list of what you can get at the different belt systems. The items will be shipped via mail unless you can pick it up in the building (Stavanger Forus \u00d8st).</p> <ul> <li><code>White</code> belt:<ul> <li>Your very own white lanyard decorated with placeholders for those hard-earned pins.</li> </ul> </li> <li><code>Yellow</code> belt:<ul> <li>A yellow pin to hang on your newly acquired lanyard. Be proud!</li> <li>A yellow S.W.A.T. to showcase your advancement within security. It will be your best friend in meetings.</li> </ul> </li> <li><code>Green</code> belt:<ul> <li>A green pin to display your advanced knowledge of secure coding.</li> </ul> </li> <li><code>Brown</code> belt:<ul> <li>A brown pin to show that you are no rookie in terms of being one of the top-notch champions in our network.</li> <li>A brown S.W.A.T. that will become your best friend when focusing.</li> </ul> </li> <li><code>Black</code> belt:<ul> <li>A black pin. Your final step to look like an overly decorated army general. You can retire happy as your life-long goal of contributing to Equinor's Security Champion Network is finally complete for now.</li> <li>Hoodie: Now that you are all medal'ed out, the last thing you need is that sweet warm hacker hoodie to put the . over the i.</li> </ul> </li> </ul> <p>Note</p> <p>Merch will \"build up\" and be shipped in bulk, normally every 2/3 belt levels in order to avoid too much shipping work.</p>"},{"location":"toolbox/","title":"AppSec Toolbox","text":""},{"location":"toolbox/#welcome-to-the-equinor-appsec-toolbox","title":"Welcome to the Equinor AppSec Toolbox","text":"<p>This is your hub for most things that the AppSec team is working on, in the navigation on the left you'll find categories of guidelines and tools.</p> <p>Info</p> <p>Our official communications channel is Slack and you can find us in the #appsec channel.</p>"},{"location":"toolbox/#recommended-reading","title":"Recommended reading","text":"<p>GitHub Advanced Security</p> <p>Threat Modeling</p> <p>Snyk</p> <p>Git &amp; GitHub</p> <p>Sharing Secrets</p> <p>Logging and Monitoring</p>"},{"location":"toolbox/github-advanced-security/","title":"GitHub Advanced Security (GHAS)","text":"<p>We're excited to announce that we will be transitioning to GitHub Advanced Security in October.</p> <p>We have been collecting your questions and answering them in the FAQ.</p> <p>TL;DR</p> <p>\ud83d\uddd3\ufe0f GHAS will be available for all Equinor developers on the 1st of October.</p> <p>\ud83e\udd37 We will lose access to Snyk on the 1st of November.</p> <p>\ud83c\udf0e We recommend enabling GHAS features in your public repositories.</p> <p>\ud83d\udde3\ufe0f Let us know in the #appsec channel if you have any questions</p>"},{"location":"toolbox/github-advanced-security/#what-this-means-for-you","title":"What this means for you?","text":"<p>Unified Platform: Code and code security will now be managed under the same platform, eliminating the need for a separate dashboard.</p> <p>Current Usage: We will continue using Snyk until our licenses expire, so please keep utilizing the platform during this transition.</p> <p>Overlap Period: In October, we\u2019ll have a month where both Snyk and GHAS will be in use to ensure a smooth transition.</p> <p>Container Scanning: Please note that GHAS does not currently offer container scanning solutions, we have explored other alternatives like Trivy so please reach out if you have any questions.</p> <p>GHAS Features: We encourage you to enable GHAS features like secret scanning, Dependabot, and CodeQL in your public repositories. These features are free for open-source projects, so take advantage of them!</p>"},{"location":"toolbox/github-advanced-security/faq/","title":"GHAS Transition FAQ","text":""},{"location":"toolbox/github-advanced-security/faq/#can-we-enable-ghas-now","title":"Can we enable GHAS now?","text":"<p>No. There are no available licences until 1st of October, unless your repository is public, or we have gotten in touch with your team.</p>"},{"location":"toolbox/github-advanced-security/faq/#should-we-still-import-our-new-repositories-into-snyk","title":"Should we still import our new repositories into Snyk?","text":"<p>Yes. Snyk will be the preferred tool of use until 1st of October.</p>"},{"location":"toolbox/github-advanced-security/faq/#do-we-really-only-get-one-month-to-prepare","title":"Do we really only get one month to prepare?","text":"<p>We unfortunately cannot have two solutions active for the entire transition period. This should however not be a major issue for most. Enabling GHAS is fairly straight forward and we are here to help you with the transition. During October you will have access to both Snyk and GHAS, we will lose access to Snyk on 1st of November but it can be smart to disable alerts in Snyk once you have enabled GHAS in order to not receive double alerting.</p>"},{"location":"toolbox/github-advanced-security/faq/#is-appsec-publishing-some-guidelines-best-practices-for-enabling-and-configuring-ghas-anytime-soon","title":"Is AppSec publishing some guidelines / best practices for enabling and configuring GHAS anytime soon?","text":"<p>Yes, we have published a guide for enabling and configuring GHAS.</p>"},{"location":"toolbox/github-advanced-security/faq/#will-there-be-an-onboarding-session","title":"Will there be an onboarding session?","text":"<p>We are planning on having a few open sessions in October to assist with setting up GHAS. In most cases the documentation should be sufficient. We will also have some guided setup sessions where we show our recommended setup. We will announce these sessions at a later time.</p>"},{"location":"toolbox/github-advanced-security/faq/#what-role-do-i-need-to-enable-ghas","title":"What role do I need to enable GHAS?","text":"<p>From 1st of October, repository admins will be able to enable GHAS, we recommend taking a look at our guide for enabling and configuring GHAS.</p>"},{"location":"toolbox/github-advanced-security/faq/#what-dashboards-will-i-have-access-to-how-can-i-see-vulnerability-trends","title":"What dashboards will I have access to? How can I see vulnerability trends?","text":"<p>With GHAS, you'll have access to the security tab in each repository, where you can view code scanning alerts, secret scanning results, and Dependabot insights (dependencies).</p> <p>For broader visibility, the organization level security tab provides aggregated data across all repos you have access to. Here you can find an overview on alerts over time, security risks currently open and security coverage. You can also see all your Dependabot, code scanning and secret scanning alerts across all repos. The organization level security tab is available for repository admins only.</p>"},{"location":"toolbox/github-advanced-security/faq/#any-general-guidelines-for-container-scanner","title":"Any general guidelines for container scanner?","text":"<p>We are currently evaluating open source alternatives like Trivy. At the moment, there are no guidelines on container scanner but we are working on releasing some as soon as possible.</p>"},{"location":"toolbox/github-advanced-security/faq/#does-ghas-support-iac-scanning","title":"Does GHAS support IaC scanning?","text":"<p>No, we are looking into open source alternatives, like Trivy, to support teams with scanning their IaC. If you have any good experiences with an IaC open source tool, please let us know.</p>"},{"location":"toolbox/github-advanced-security/faq/#should-i-also-enable-ghas-for-repositories-that-only-contain-documentation","title":"Should I also enable GHAS for repositories that only contain documentation?","text":"<p>From 1st of October, all repositories in the Equinor organization should be onboarded into GHAS. Repositories that only contain documentation can also contain secrets and GitHub actions, GHAS can help by detecting secrets in the repository and by scanning your GitHub actions for vulnerabilities or out of date versions.</p>"},{"location":"toolbox/github-advanced-security/faq/#how-can-i-get-security-alerts-in-slack","title":"How can I get security alerts in slack?","text":"<p>This is unfortunately not something we have found an easy solution to. If you are aware of a method please reach out to your nearest AppSec representative! We recommend setting up e-mail notifications in GitHub, you can filter GHAS specific e-mails to a separate folder by using for example the \"security\" keyword for filtering. GHAS alerts will also be shown in your repository Security tab.</p>"},{"location":"toolbox/github-advanced-security/faq/#what-should-i-do-to-offboard-from-snyk","title":"What should I do to offboard from Snyk?","text":"<p>From 1st of October, once you have enabled GHAS, you can disable alerting in Snyk in order to not receive double alerting. Once you have completed the migration onto GHAS you should revoke the PAT tokens that have been used with Snyk.</p>"},{"location":"toolbox/github-advanced-security/faq/#do-you-still-recommending-using-trufflehog","title":"Do you still recommending using Trufflehog?","text":"<p>Absolutely, Trufflehog can be automated to run during a pre-commit hook which will significantly reduce the chance that a secret is pushed, although GitHub has push-protection and high quality secret scanning capabilities. You can see the currently supported patterns by GHAS here: https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#default-patterns</p>"},{"location":"toolbox/github-advanced-security/faq/#should-we-have-a-custom-code-scanning-setup","title":"Should we have a custom Code Scanning setup?","text":"<p>The default code scanning should be good for most cases. It scans on every commit. You may monitor the consumption in minutes on Github Actions. If that number goes above 1000 minutes a month, then contact the AppSec team. They'll first try to take that consumption down by fine tuning CodeQL. And if that fails, only then we can consider weekly scans instead of every commit.</p>"},{"location":"toolbox/github-advanced-security/faq/#what-will-happen-to-the-snyk-vulnerability-report-in-radix","title":"What will happen to the Snyk vulnerability report in Radix?","text":"<p>Snyk will most likely be replaced with Trivy in Radix, for more information contact the Radix team.</p>"},{"location":"toolbox/github-advanced-security/setup/","title":"GitHub Advanced Security Enablement and Setup","text":"<p>Important</p> <ul> <li>Internal and Private Repositories must wait until 1st of October before enabling GHAS.</li> <li>You must be a repository Admin to proceed.</li> </ul> <p> This document is intended to give teams an overview of the options available in GitHub Advanced Security (GHAS), including a short summary of each feature, which ones we recommend enabling, which ones we don't and which are up to your team.  The document is structured into 3 sections, Secret Protection, Code Security and Dependency Graph, reflecting the structure you will find in Github's security settings. To start off, navigate to your repository and under Settings -&gt; Security -&gt; Advanced Security. </p> <p></p> <p>Below you can find a table summary of the options we recommend to enable:</p> Feature Options Recommendation Secret Protection (1) \u2705 Yes Validity Checks (2) \ud83e\udd37 Optional Non-provider Patterns (3) \u2705 Yes Scan for Generic Passwords (4) \u2705 Yes Push-Protection (5) \u2705 Yes Who can bypass push protection (6) \ud83d\udc64 Anyone (default) Prevent Alert Dismissal (7) \u274c No Custom Patterns (8) \ud83e\udd37 Optional Code Security (1) \u2705 Yes CodeQL analysis (2) \u2699\ufe0f Default setup Other tools (3) \ud83e\udd37 Optional Copilot Autofix (4) \u2705 Yes Copilot Autofix for Third Party Tools (5) \ud83e\udd37 Optional Prevent Direct Alert Dismissal (6) \u274c No Protection Rules (7) \u2699\ufe0f Default setup Private Vulnerability Reporting (8) \ud83e\udd37 Optional Dependency Graph (1) \u2705 Yes Automatic dependency submission (2) \u2705 Yes Dependabot Alerts (3) \u2705 Yes Dependabot Security Updates (4) \u2705 Yes Grouped Security Updates (5) \ud83e\udd37 Optional Dependabot Version Updates (6) \u2705 Yes* Dependabot on Action Runners (7) \u2705 Yes Dependabot on Self-hosted Runners (8) \u274c No <p>* Please see important note and warning on Dependabot Version Updates (6) section   </p>"},{"location":"toolbox/github-advanced-security/setup/#secret-protection","title":"Secret Protection","text":"<p>This section will guide you through the enablement of secret scanning for your repositories.  It gives a brief explanation of each of the options available and our recommendation on whether to enable them.  The goal is to detect exposed secrets early on thus reducing risk in the SDLC.  </p> <p></p>"},{"location":"toolbox/github-advanced-security/setup/#1-secret-protection","title":"(1) Secret Protection","text":"<p>Enabling Secret Protection will enable secret scanning on the repository. Upon enabling GitHub will start scanning the whole history of the repository for secrets, this scan will include commits, pull requests, issues, comments, discussions and wikis.   \u2705 Secret Protection should be enabled.</p>"},{"location":"toolbox/github-advanced-security/setup/#2-validity-checks","title":"(2) Validity checks","text":"<p>Enhances secret scanning by verifying whether a detected secret is actually valid. When enabled, GitHub forwards the detected secret to the relevant provider (for example, an Azure secret would be sent to Microsoft) to confirm if it's active. Enabling this feature provides teams with insight into whether a secret is live and exploitable. However, it's important to note that the third party may, in the future, automatically revoke or disable the secret once its validity is confirmed. For instance, if Azure confirms a secret is active, it might proactively disable it to prevent abuse.   \ud83e\udd37 The enablement of Validity checks should be decided by the team.</p>"},{"location":"toolbox/github-advanced-security/setup/#3-non-provider-patterns","title":"(3) Non-provider patterns","text":"<p>Improves secret scanning coverage by also detecting secrets that don't belong to a specific provider (like Azure or AWS). This includes things like custom authentication tokens, connection strings, SSH keys, and other credentials.   \u2705 We recommend enabling Non-provider patterns to catch a broader range of exposed secrets, not just those tied to known providers.</p>"},{"location":"toolbox/github-advanced-security/setup/#4-scan-for-generic-passwords","title":"(4) Scan for generic passwords","text":"<p>Uses Copilot AI to identify passwords that don\u2019t follow standard or known patterns. This helps catch secrets that might otherwise go undetected\u2014but it can also lead to a slightly higher number of false positives.   \u2705 We recommend giving Scan for generic passwords a try. If it generates too much noise or becomes disruptive, let us know and feel free to disable it.</p>"},{"location":"toolbox/github-advanced-security/setup/#5-push-protection","title":"(5) Push Protection","text":"<p>Scans commits for supported secrets and blocks them before they\u2019re pushed to a remote branch. This helps stop secrets from ever reaching the repository history, making cleanup easier or even unnecessary.  Pushes are only blocked if GitHub is very confident that the detected string is a valid secret from a known provider (like Azure, AWS, etc.). It does not block on non-provider patterns or generic passwords detected by AI to keep false positives low.  That said, developers will see push failures when secrets are detected even if they\u2019re false positives, some errors may be a bit hard to figure out and might require digging into logs, so it\u2019s important to prepare your team for this behavior. The alerts can be bypassed (6).   \u2705 We recommend enabling Push Protection to prevent secrets at the source. But make sure your team is aware of the tradeoff: it may occasionally block a push, but it\u2019s far less painful than cleaning up leaked secrets later.</p>"},{"location":"toolbox/github-advanced-security/setup/#6-who-can-bypass-push-protection-for-secret-scanning","title":"(6) Who can bypass push protection for secret scanning","text":"<p>This option is only available when push protection (5) is enabled and it configures who is allowed to bypass the block if a secret is detected.  \ud83d\udc64 By default, GitHub allows anyone with write access to bypass the rule and this works well for most teams. If your team prefers tighter control, you can restrict bypass permissions to specific roles or individuals.</p>"},{"location":"toolbox/github-advanced-security/setup/#7-prevent-direct-alert-dismissals","title":"(7) Prevent direct alert dismissals","text":"<p>This Setting requires teams to submit a request before they can dismiss a secret scanning alert. These requests must then be reviewed and approved by the AppSec Team.  \u274c We do not recommend enabling prevent direct alert dismissals. The AppSec team believes that teams are in the best position to assess alerts in their context and should have the autonomy to manage them.</p>"},{"location":"toolbox/github-advanced-security/setup/#8-custom-patterns","title":"(8) Custom Patterns","text":"<p>Lets you define your own regex rules to detect secrets specific to your team or application, things GitHub doesn\u2019t catch by default, this can be useful for internal tokens, credentials, or configuration values that follow a custom format.   \ud83e\udd37 It takes a bit of effort to set up custom patterns, and we don\u2019t expect most teams will need it. But if you think this could be useful for your setup, let us know and we will be happy to help you configure it.</p>"},{"location":"toolbox/github-advanced-security/setup/#code-security","title":"Code Security","text":"<p>Code Security manages the configuration of GitHub\u2019s Static Application Security Testing (SAST) tool also known as CodeQL, which runs via GitHub Actions to scan your repository for security issues in the code. </p> <p></p>"},{"location":"toolbox/github-advanced-security/setup/#1-code-security","title":"(1) Code Security","text":"<p>The setup of CodeQL may vary depending on the language and ecosystem, some will work out of the box, while others may require configuring a workflow file in the repo. Once enabled, it continuously scans code for common vulnerabilities.  \u2705 Code Security should be enabled.</p>"},{"location":"toolbox/github-advanced-security/setup/#2-codeql-analysis","title":"(2) CodeQL Analysis","text":"<p>This has be configured for code security to work. Once enabled a GitHub action will run to scan your code automatically.  \u2699\ufe0f We recommend choosing the default setup for CodeQL Analysis, which works well for most repositories and languages.</p> <p>Warning</p> <p>After CodeQL has run for the first time, we recommend you check the Security tab of your repo and then navigate to Code Scanning. If the default setup is not working properly you will see the following warning. Check the tool status page to get more information about the issue. If you encounter this get in touch with us.</p> <p></p>"},{"location":"toolbox/github-advanced-security/setup/#3-other-tools","title":"(3) Other Tools","text":"<p>Enables you to integrate third party code scanning tools such as Trivy for IaC and container scanning.   \ud83e\udd37 If you think setting up other tools would be useful, let us know so we can help you configure it.</p>"},{"location":"toolbox/github-advanced-security/setup/#4-copilot-autofix","title":"(4) Copilot Autofix","text":"<p>Allows Copilot to automatically generate a pull request to fix vulnerabilities identified by CodeQL. When enabled, you\u2019ll see suggested fixes, and you can choose to let Copilot create a PR with the proposed changes. It\u2019s a helpful way to quickly address straight forward issues but we always recommend to review the fix before merging.  \u2705 We recommend enabling Copilot Autofix (it does not need a copilot license).</p>"},{"location":"toolbox/github-advanced-security/setup/#5-copilot-autofix-for-third-party-tools","title":"(5) Copilot Autofix for third-party tools","text":"<p>Copilot Autofix also works with third-party security tools, not just CodeQL. It will generate potential fixes based on issues identified by other tools installed in the repository.</p> <p>Note</p> <p>Currently this feature only supports ESLint. ESLint has to be configured in the repository through the other tools option.</p> <p>\ud83e\udd37 The enablement of Copilot Autofix for third-party tools should be decided by the team.</p>"},{"location":"toolbox/github-advanced-security/setup/#6-prevent-direct-alert-dismissals","title":"(6) Prevent direct alert dismissals","text":"<p>If enabled, any attempt to dismiss a CodeQL alert will trigger a review request that\u2019s sent to the AppSec team. This adds unnecessary overhead and delays. We believe teams should be trusted to manage and triage their own alerts based on what makes sense in their context.  \u274c We do not recommend enabling prevent direct alert dismissals setting.</p>"},{"location":"toolbox/github-advanced-security/setup/#7-protection-rules","title":"(7) Protection rules","text":"<p>Allows you to set a check runs failure threshold to control when code scanning should block a pull request. You can choose the alert severity level that will cause the Code Scanning check to fail. Combined with a branch ruleset, this allows you to prevent merges to protected branches when these severity level issues are detected.  \u2699\ufe0f The recommended set up of protection rules should be good for most teams, let us know if you need help setting up a more advanced ruleset.</p>"},{"location":"toolbox/github-advanced-security/setup/#8-private-vulnerability-reporting","title":"(8) Private vulnerability reporting","text":"<p>This is only available for public repositories, it provides a standardized and secure way for the community to report security vulnerabilities directly to the maintainers of the repository.  \ud83e\udd37 Enablement of private vulnerability reporting should be a team decision, consider how you plan to respond to incoming reports if enabled.</p>"},{"location":"toolbox/github-advanced-security/setup/#dependency-graph","title":"Dependency Graph","text":"<p>The Dependency Graph gives GitHub visibility into the dependencies used in your repository. This is the foundation for the features below, enabling GitHub to identify known vulnerabilities or outdated packages in your project. Dependabot helps ensure your supply chain is monitored for risks and helps you in keeping your dependencies secure and up to date.</p> <p></p>"},{"location":"toolbox/github-advanced-security/setup/#1-dependency-graph","title":"(1) Dependency Graph","text":"<p>Must be enabled to use Dependabot, this allows GitHub to upload your dependencies and scan them for known vulnerabilities For this to work, your repository must include a lock or manifest file. In some ecosystems, like .NET, Java and Jupyter Notebooks you may need to run a dotnet restore (more guidance on this will come) to generate the required files.  \u2705 Dependency Graph should be enabled.</p>"},{"location":"toolbox/github-advanced-security/setup/#2-automatic-dependency-submission","title":"(2) Automatic dependency submission","text":"<p>This allows GitHub to detect and report dependencies automatically. It helps keep your Dependency Graph up to date without manual intervention.  \u2705 Automatic dependency submission should be enabled with the default settings.</p>"},{"location":"toolbox/github-advanced-security/setup/#3-dependabot-alerts","title":"(3) Dependabot alerts","text":"<p>Notify you when vulnerabilities are found in your dependencies. Alerts will appear in the GitHub UI under the Security Dashboard, and can also be sent by email and filtered to a separate folder (e.g. by using the \"security\" keyword).</p> <p>Note</p> <p>Slack notifications are not available with GHAS. We recommend setting up email notifications or configuring GitHub notification rules to make sure your team stays up to date on security issues.</p> <p>\u2705 We recommend enabling Dependabot alerts.</p>"},{"location":"toolbox/github-advanced-security/setup/#4-dependabot-security-updates","title":"(4) Dependabot security updates","text":"<p>This will automatically create pull requests to upgrade dependencies to safe, non-vulnerable versions.  \u2705 We recommend enabling Dependabot security updates.</p>"},{"location":"toolbox/github-advanced-security/setup/#5-grouped-security-updates","title":"(5) Grouped security updates","text":"<p>This option allows Dependabot to combine multiple security updates into a single pull request. This helps reduce the number or PRs but might require more thorough testing to ensure the combined upgrades do not break existing functionality.  \ud83e\udd37 The enablement of Grouped security updates is up to the team.</p>"},{"location":"toolbox/github-advanced-security/setup/#6-dependabot-version-updates","title":"(6) Dependabot version updates","text":"<p>Allows Dependabot to open pull requests to keep your dependencies up to date, even if there are no known vulnerabilities. This helps reduce technical debt and makes it easier to stay updated to the latest versions.</p> <p>Note</p> <p>If you're using GitHub Actions with SHA versioning, this option allows Dependabot to automatically update your GitHub Actions. If you're using GitHub Actions with semantic versioning, this option is optional, but we still recommend enabling it to maintain good security practices by keeping all your dependencies updated to latest versions.</p> <p>Warning</p> <p>Dependabot will suggest upgrading dependencies whenever new versions are available. Enabling this option can lead to a significant number of pull requests generated, requiring the team to actively manage them. It's beneficial to have a well defined process in place to handle these PRs effectively.</p> <p>\u2705 We recommend enabling Dependabot version updates.</p>"},{"location":"toolbox/github-advanced-security/setup/#7-dependabot-on-action-runners","title":"(7) Dependabot on action runners","text":"<p>Enabling this option will result in Dependabot being run on an action runner, making it more transparent what Dependabot does. GitHub is moving to run by default on Action runners.  \u2705 We recommend enabling Dependabot on action runners.</p>"},{"location":"toolbox/github-advanced-security/setup/#8-dependabot-on-self-hosted-runners","title":"(8) Dependabot on self-hosted runners","text":"<p>Enables Dependabot to run on a self-hosted action runner.  \u274c For most teams we do not recommend enabling Dependabot on self-hosted runners, but let us know if you think it could be useful for your team.</p>"},{"location":"toolbox/github-advanced-security/setup/#further-questions-comments","title":"Further Questions &amp; Comments","text":"<p>We encourage you to share your experiences, issues and improvement points with us. If you have any further questions or comments please reach out to us on the #appsec slack.</p>"},{"location":"toolbox/guidelines/authn-authz/","title":"Authentication and Authorization","text":"<p>Authentication and Authorization are complex topics. Things are often very context specific. Answers are often not straight forward, we often have more than one option. In the sections below we will give advice on protocols, tools and principle we find helpful.</p> <p>The scope for this guideline is web application and api's.</p>"},{"location":"toolbox/guidelines/authn-authz/#best-current-practices-and-guidelines","title":"Best current practices and guidelines","text":"<ul> <li>Microsoft's Identity Platform is the primary component in our set-up.</li> <li>We use Microsoft Entra ID (was Azure AD) as our primary identity provider and authorization server.</li> <li>We use oAuth2 to facilitate authorization</li> <li>Authorization Code Flow is often the preferred flow</li> <li>We avoid the \"Implicit Grant Flow\"</li> <li>Public Clients should use Auth Code Flow with PKCE</li> <li>We use OpenId Connect (OIDC) as an authentication layer on top of oAuth2</li> <li>We use SAML2/OIDC for federation</li> <li>We refer to the MS Identity Platform for implementation guidelines (guides for web, api, desktop, mobile, service, deamon/script, example code, sdk and libraries)</li> <li>We prefer Microsoft Authentication Library (MSAL) to implement AuthN and AuthZ in our code.</li> </ul> <ul> <li>For Web applications we prefer the Backend-For-Frontend Pattern (BFF)</li> <li>We usually do not develop \"multitenant applications\". If we do we are aware of the risks.</li> </ul> <ul> <li>Using oAuth2 proxies as a front door to app authentication is ok as long as the team understand and manage the risks involved.</li> <li>We advocate a \"Security in depth\" mindset, only protecting the front-door will not do it</li> <li>We prefer managed identities over service principals when available (MS Workload Identities)</li> </ul> <ul> <li>We refer to the Appsec Fundamentals A&amp;A workshop for training (below)</li> <li>We strongly suggest doing continuous threatmodeling for A&amp;A work</li> <li>We strongly state that teams must have sufficient knownledge on A&amp;A</li> </ul>"},{"location":"toolbox/guidelines/authn-authz/#equinor-quirks","title":"Equinor \"quirks\"","text":"<ul> <li>We use conditional access for most our accounts and identities. Parts of this is implemented as \"managed device\"</li> <li>The Device Code Flow will not work on a managed device.</li> <li>The Omnia Docs contains important information on AuthN, AuthZ, Entra ID, consent etc.</li> </ul>"},{"location":"toolbox/guidelines/logging-monitoring/","title":"Web Application Logging and Monitoring","text":"<p>Info</p> <p>This is a work in progress. Any thoughts? Reach out to us on Slack or e-mail at <code>appsec[at]equinor.com</code></p> <p>Target Audience - Application teams maintaining or implementing web applications.</p> <p>Logging and Monitoring are core components of a robust security posture. They contribute for the operational health of the application, assist non-repudiation controls, allow for detection of security incidents and support it's investigation.</p> <p>In this guideline we address logging for security, maintenance and operational purposes. This is not a single truth, as each application is different. Additional requirements might apply based on the criticality of the application and classification of information managed by it.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#tldr","title":"TL;DR","text":"<ul> <li>Application teams should ensure that logging and monitoring is in place for operational and maintenance purposes</li> <li>The front-end is a public client and the logs from it cannot be trusted</li> <li>Do a threat model to see where security logging would benefit you the most</li> </ul>"},{"location":"toolbox/guidelines/logging-monitoring/#application-specific-logging-monitoring","title":"Application Specific Logging &amp; Monitoring","text":""},{"location":"toolbox/guidelines/logging-monitoring/#security-logging","title":"Security Logging","text":"<p>Security logging is a huge topic, so we will limit our scope. You should not log \"just to log\", and what you log should make sense. Consider the below points based on your risk appetite, sensitivity of data and your applications threat model.</p> <p>Note</p> <p>This is not a complete list, not a minimum requirement, but a good start to get ideas.</p> <ul> <li>Log when state of data changes occur</li> <li>Log when someone tries to gain access to resources they do not have access to</li> <li>Log actions done by administrators</li> <li>Log access to sensitive documents</li> </ul>"},{"location":"toolbox/guidelines/logging-monitoring/#examples","title":"Examples","text":"<ul> <li><code>Scans:</code> Somebody keeps poking our end-points, testing known end-points, or trying different malicious inputs. A fitting mitigation for this threat can be throttling / rate limiting. Logging would not properly mitigate the issue, because the application team would be unable to take action to stop such an attack. Such an attack would be up to CDC to detect and respond</li> <li><code>Access control:</code> Assume an application holds data that is owned by specific users, and it is required that data can be accessed only by its owner. A risk is identified that, due to either errors or malicious action, user Alice could access user Bob's data. In this case, logging is an acceptable mitigation to this risk. The application can log whenever a user accesses a piece of data. Controls can be set up to check the logs in real time and detect if some accesses are incompatible, or this could happen on a regular basis (e.g. once a month a validation routine is run on the logs)</li> <li><code>Privileged (admin) access:</code> Some applications may include special permissions for admins. What application admins can do is determined by the application, so misuse of admin credentials is a threat in the scope of the application. Logging accesses and actions performed by admins is a valid mitigation strategy</li> </ul>"},{"location":"toolbox/guidelines/logging-monitoring/#where-to-store-security-logs","title":"Where to store security logs","text":"<p>It depends on your situation is the \"boring answer\". If you have a small application, it might be practical to have the security logs with your application logs. If you have a big application, it might be useful to store security logs in a Azure Log Analytics workspace separate from your Maintenance &amp; Operational Logging. This is so it can be easily consumed if you are asked for your security logs.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#maintenance-operational-logging","title":"Maintenance &amp; Operational Logging","text":"<p>The application teams should ensure, that logging and monitoring is in place for operational and maintenance purposes.</p> <p>We recommend that teams address and put into place a logging strategy as soon as possible in the software development life cycle. We have experienced that the later logging is addressed the harder it is to put into place.</p> <p>A logging strategy should address</p> <ul> <li>Why you are logging</li> <li>Where to send logs</li> <li>Where to store the logs</li> <li>How to maintain the logs</li> </ul> <p>The granularity of logging and frequency of monitoring will depend on the criticality of the application and of the information managed by it.</p> <p>Iterative threat modeling sessions should be conducted to access the level of logging and monitoring required. These sessions should involve the BSO/TPM as they will be the best equipped to provide insight into the business and security requirements of the application.</p> <p>Depending on your selected log strategy, you should consider having immutable logs, especially if you are handling confidential data.</p> <p><code>Critical or sensitive information, access tokens, secrets, source code, keys, certificates, etc.. are examples of what should never be logged.</code></p>"},{"location":"toolbox/guidelines/logging-monitoring/#personal-identifiable-information-pii-gdpr","title":"Personal Identifiable Information (PII) &amp; GDPR","text":"<p>The team should pay particular attention to minimize to the absolute minimum the collection and storage of any kind of private or personal identifiable information (PII) in the log files.</p> <p>We recommend consulting the GDPR - Privacy by Design Guideline for further guidance.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#logging-on-the-back-end-vs-front-end","title":"Logging on the back-end vs front-end","text":"<p>Tip</p> <p>The back-end is a confidential client, the logs presented from it can be trusted.</p> <p>The front-end is a public client as such the logs presented from it cannot be trusted.</p> <p>Ideally, if front-end logging is necessary, a separate logging instance should be set up for both the back-end and front-end. If sharing the same logging instance, we suggest you tag the logs with the source when prevenient from the backend, so it can be easily identified and distinguished which are trusted logs and which are untrusted logs.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#retention-period","title":"Retention Period","text":"<p>In accordance to TR2375 SR133039:</p> <ul> <li>Access logs from solutions containing personal data shall be stored for 3 months</li> <li>Logs that enable detection and investigation of incidents shall be stored for 3 months</li> <li>Logs are from applications and systems processing confidential information shall be stored for 18 months</li> </ul> <p>We do recommend setting up auto deletion of logs after they have passed the intended retention period to reduce cost and manual maintenance.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#logging-monitoring-best-practices","title":"Logging &amp; Monitoring Best Practices","text":"<p>There are some best practices that we recommend teams to keep in mind when implementing logging and monitoring into their applications.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<p>When it comes to monitoring and alerting, each team should decide on how much is necessary, this depends on the criticality of the application and of the information handled by it.</p> <p>Info</p> <p>Monitoring and alerts should not take most of the time from the team.</p> <p>Monitoring and alerts can quickly become overwhelming. It can be considered for teams that want to be proactive on identifying issues in the application before their users or it can be a good mitigation strategy for a threat identified during a threat modeling session.</p>"},{"location":"toolbox/guidelines/logging-monitoring/#resources","title":"Resources","text":"<p>Here are some resources on logging and monitoring we can recommend:</p> <ul> <li>OWASP Logging Cheat Sheet</li> <li>OWASP Logging Vocabulary</li> <li>OWASP ASVS</li> <li>OWASP Implement Security Logging and Monitoring</li> <li>OWASP Security Logging and Monitoring Checklist</li> <li>Snyk Lesson on Logging Vulnerabilities</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/","title":"Secret Scanning","text":"<p>As developers, we know that secrets like passwords, API keys, and access tokens are critical to our work. But what happens when these secrets accidentally end up in our code, logs or error messages?</p> <p>This guideline aims to present relevant tools, some good practices for managing this risk, and what to do when we have messed up. The AppSec team provides a 3 hour hands-on workshop on getting started with secret scanning - https://github.com/equinor/appsec-fundamentals-secret-scanning.</p> <ul> <li>Recommended tools</li> <li>Where to scan for secrets in our SDLC</li> <li>What to do when we have messed up \ud83e\udd2f</li> <li>How do we manage secrets in our dev environments?</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#recommended-tools","title":"Recommended tools","text":"<ul> <li>Snyk Code (in IDE)</li> <li>Trufflehog (elsewhere)</li> <li>GitHub Advanced Security - Secret Scanning</li> </ul> <p>Please note that:</p> <ul> <li>False positives is a sizeable challenge, scanners need to be fine tuned to your context (detectors, testing, verification +++)</li> <li>Incremental scans would be helpful, you may not want to scan everything all the time</li> <li>Don't underestimate the cultural change when changing how you work. Good practices are to document how your team does Secure Development and to threat model how you work. Use/revisit this information regularly in on-boarding of new team members and in retrospectives.</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#github-advanced-security-secret-scanning","title":"GitHub Advanced Security: Secret Scanning","text":"<p>GitHub Advanced Security is integrated into GitHub, providing features like the secret scanning module free for public repositories. This module supports these secret types so far.</p>"},{"location":"toolbox/guidelines/secret-scanning/#how-to-turn-it-on-for-your-repository","title":"How to turn it on for your repository","text":"<ul> <li>Go to your repository settings</li> <li>Under security find Code security and analysis</li> <li>Enable secret scanning.</li> <li>Consider enabling push protection for added security.</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#global-push-protection","title":"Global push protection","text":"<p>GitHub provides a beta feature that will prevent pushes from you that contain supported secrets across all public repositories.</p> <ul> <li>Enable by going to your user settings, code security and analysis and enable the beta feature push protection for yourself.</li> <li>Note that this is an experimental feature</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#where-to-scan-for-secrets-in-our-sdlc","title":"Where to scan for secrets in our SDLC","text":"<p>The general idea is to catch secrets in code (and other places) as early as possible. Our recommendation for most teams is:</p> <p>While your are developing, in your development environment</p> <ul> <li>Scan in your IDE (using Snyk Code)</li> <li>Scan in your local build process (using Trufflehog)</li> <li>Scan in git pre-commits (Run a trufflehog scan on commit for example?)</li> </ul> <p>In your CI pipeline</p> <ul> <li>Scan as part of PR checks (using Trufflehog)</li> <li>Scan container images as well (using Trufflehog)</li> </ul> <p>Other places:</p> <ul> <li>Scanning logs (using Trufflehog)</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#what-to-do-when-we-have-messed-up","title":"\ud83e\udd2f What to do when we have messed up \ud83e\udd2f","text":"<p>We will mess up sooner or later. So be prepared, both as an individual developer and as teams!</p>"},{"location":"toolbox/guidelines/secret-scanning/#steps-to-mitigate-a-leak","title":"Steps to mitigate a leak","text":"<ul> <li>Revoke/rotate the exposed secret - <code>THIS IS PRIORITY #1</code></li> <li>Depending on risk consequence - considering contacting IT-Security for assistance</li> <li>Contact Help Desk at (+47) 51 999 222</li> <li>Clean the git history</li> <li>If the repo is public/internal, consider making it <code>private</code> until the secrets are removed</li> <li>Potentially inspect logs</li> <li>Do a retrospective with your team</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#cleaning-the-git-history","title":"Cleaning the git history","text":"<p>This part can be very easy to super hard, it all depends on what, where and when.</p>"},{"location":"toolbox/guidelines/secret-scanning/#you-are-working-locally-the-secret-is-in-the-last-commit-not-pushed","title":"You are working locally, the secret is in the last commit, not pushed","text":"<ul> <li>The secret is the only file in the last commit</li> <li>Consider dropping the last commit, doing a <code>git reset --hard HEAD~1</code></li> <li>The secret is not the only file in the last commit</li> <li>Consider altering files and then amend the last commit</li> <li><code>git add [files]; git commit --amend</code></li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#you-are-working-locally-the-secret-is-beyond-the-last-commit","title":"You are working locally, the secret is beyond the last commit","text":"<p>Then things could get complicated. Git is distributed, you are not on your own. Rewriting the history could lead to all sorts of issues</p> <p>Explore:</p> <ul> <li>git-filter-repo</li> <li>the bfg repo-cleaner</li> </ul> <p>You'll also find some guidelines in the github.com docs</p> <p>Be aware of:</p> <ul> <li>You may need to coordinate with your team</li> <li>Force push is powerful, use carefully</li> <li>Do a backup before you mess things up even more!</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#how-do-we-manage-secrets-in-our-dev-environments","title":"How do we manage secrets in our dev environments?","text":"<p>Context matters, a lot. There are many different ways of handling secrets in development environments. The opportunities will depend on the context. We will always have to find a good balance between security and convenience.</p>"},{"location":"toolbox/guidelines/secret-scanning/#a-few-known-ways-of-managing-secrets-is","title":"A few known ways of managing secrets is","text":"<ul> <li>Using password/credential managers</li> <li>Using keychain services</li> <li>Storing secrets in encrypted files</li> <li>Storing secrets in .env files</li> <li>Storing secrets in secret management tools (like Azure Key Vault)</li> <li>Injecting secrets into environment variables</li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#a-few-known-controls-could-be","title":"A few known controls could be","text":"<ul> <li>Using .gitignore</li> <li>Using .dockerignore</li> <li>Using secret scanners</li> <li>Not all tools are equal</li> <li>Limit access to secrets</li> <li>Use different secrets for different environments (dev, test, prod)</li> <li>Rotate secrets often, automate!</li> <li>Auditing and logging</li> <li>Keep secrets out of command history</li> <li>Educating and training are smart</li> <li><code>Threat modelling your SDLC with your team is even smarter!</code></li> </ul>"},{"location":"toolbox/guidelines/secret-scanning/#what-we-should-not-do","title":"What we should NOT do","text":"<ul> <li>Don't hardcode secrets into code</li> <li>Don't store secrets as part of the code (not even encrypted)</li> <li>Don't emit secrets into logs</li> <li>Don't put secrets in emails</li> <li>Don't share secrets in Slack channels</li> </ul>"},{"location":"toolbox/guidelines/security-requirements/","title":"Security Requirements","text":""},{"location":"toolbox/guidelines/security-requirements/#why","title":"Why","text":"<p>Defining your security requirements will help you out when performing various security related activities. When thinking of what can go wrong and trying to secure your system, having defined what is important to you just makes sense  In addition, it helps prioritizing security-work, ex. patching vulnerabilities found in Snyk, prioritizing threats as part of Threat Modelling or when doing Security Testing.</p>"},{"location":"toolbox/guidelines/security-requirements/#what","title":"What","text":"<p>OWASP Proactive Controls</p> <p>A security requirement is a statement of needed security functionality that ensures one of many different security properties of software is being satisfied. Security requirements are derived from industry standards, applicable laws, and a history of past vulnerabilities. Security requirements define new features or additions to existing features to solve a specific security problem or eliminate a potential vulnerability.</p>"},{"location":"toolbox/guidelines/security-requirements/#how","title":"How","text":"<p>The first step would be to have a look at the business objectives and the functional requirements. From here you can derive security requirements by asking \"what CAN'T go wrong\" in order to meet these requirements.</p> <p>A good place to define these requirements would be in the Requirements Document (having everything in one place and all that ), and gradually work towards having automated test-cases for them.</p> <p>Tip</p> <ul> <li>Look at OWASP ASVS and find testable security requirements that applies to your application</li> <li>Have a look at our Guidelines</li> </ul> <p>TL;DR</p> <p>Define Security Requirements </p> <p>What are some of the things I care about?</p> <p>( * Take into account Confidentiality, integrity, availability.) </p> <p>Define Compliance Requirements </p> <p>Are there any special requirements that must be met (Compliance, and/or legal)?</p> <p>Input:</p> <ul> <li>Business requirement documents</li> <li>Functional requirements documents</li> <li>Information security policies (ex. WR1211)</li> <li>Regulatory compliance documents (ex. SOX)</li> <li>Security standards &amp; guidelines (ex. ASVS)</li> <li>Identity and access management requirements IT900 (Identity and Access Management)</li> </ul> <p>Output:</p> <ul> <li>Description of the application functionality</li> <li>List of business objectives</li> <li>Definition of the application security and compliance requirements</li> </ul>"},{"location":"toolbox/snyk/","title":"Getting started","text":"<p>Snyk is available to all teams who code in Equinor. </p> <ul> <li>First, apply for Snyk in AccessIT</li> <li>Make sure to log on to snyk sso and use your Equinor email address.</li> <li>Then EITHER<ul> <li>Create your Snyk organization using Snyk-org-maker for your team if it does not already have one.<ul> <li>NOTE: If you recently gained access, it may take up to 2 hours for system synchronization.</li> </ul> </li> <li>Ask your org-admin to add you to your teams organization</li> </ul> </li> </ul> <p>After your first time sign in, you will be able to see organizations you are a member of.</p>"},{"location":"toolbox/snyk/#crash-course-common-snyk-situations","title":"Crash Course: Common Snyk Situations","text":"<p>We have built a short curriculum, to help you learn the basics of Snyk. Take a look here.</p> <p>The curriculum is tailored to using Snyk in Equinor.</p>"},{"location":"toolbox/snyk/#privacy","title":"Privacy","text":"<p>Concerns about which data snyk collects are addressed on Snyk's privacy policy page</p>"},{"location":"toolbox/snyk/2-about-snyk/","title":"About Snyk","text":""},{"location":"toolbox/snyk/2-about-snyk/#what-is-it","title":"What is it","text":"<p>Snyk is a bundle of tools which helps managing vulnerabilities throughout the software development lifecycle. Currently Equinor has licenses for Snyk Open Source and Snyk Container which helps manage vulnerabilities related to third party software either as dependencies or as part of the base docker images your app depends on.</p>"},{"location":"toolbox/snyk/2-about-snyk/#third-party-dependencies","title":"Third party dependencies","text":"<p>All modern IT projects today pull in volumes of code from open source projects. It is not possible to read and understand this code, and as such this becomes a legitimate application security risk. An example is the recent supply chain attack through <code>colors.js</code>, where the maintainer simply added an infinite loop in the code resulting in a Denial of Service to any Node.js server using it.</p> <p>This is a strong argument for pinning packages to exact versions as provisioned in e.g. npm lock files, but the counter side of that is that you need to explicitly upgrade to get the latest security patches. Given the complexity of this landscape, using automated tools quickly becomes a requirement to keep software patched and secure.</p> <p>So what can we do to mitigate this risk? The current strategy in Equinor is to automatically scan the projects using tools like Snyk. These tools can scan code repositories continuously and on every pull request. They will find your Dockerfiles, npm package-locks, pip requirements and many other packaging formats and check if you are currently installing a dependency with an associated known vulnerability. They will also assist you in assessing the severity and suggesting mitigating actions.</p> <p>To learn more, check out how to get started</p>"},{"location":"toolbox/snyk/3-snyk_support/","title":"Getting Snyk Support","text":"<p>This short guideline give some advice on how and where to get Snyk support. The AppSec team will provide help, but most of the Snyk support in Equinor should be community driven. We have a direct connection to Snyk's Customer Success staff which also will help out (the Slack channel #snyk-equinor-bridge)</p> <p>Consult the documentation part. If you cannot find your solution, considering raising a Snyk Support Ticket.</p>"},{"location":"toolbox/snyk/3-snyk_support/#documentation-and-relevant-community-resources","title":"Documentation and relevant community resources","text":"<ul> <li>Consult the Equinor Snyk Guidelines</li> <li>Consult the official Snyk Doc</li> <li>Search the knowledge base at the official Snyk Support</li> <li>Consult the official Snyk Learn security education</li> <li>Consult or ask the Equinor AppSec Community on Slack</li> <li>Search Slack Channel #snyk-equinor-bridge</li> <li>Search Slack Channel #appsec</li> </ul>"},{"location":"toolbox/snyk/3-snyk_support/#raising-a-support-ticket-with-snyk","title":"Raising a Support Ticket With Snyk","text":"<p>We encourage raising Support tickets with Snyk. To enable some follow-up and transparency into the Equinor Community on questions/challenges, please use the following procedure:</p> <ul> <li>Create a Support ticket at Snyk Support</li> <li>Use your Equinor email</li> <li>Add additional followers from the Equinor AppSec Team</li> <li>After registering, please share the following ticker information in the #snyk-equinor-bridge Slack channel<ul> <li>Subject</li> <li>Id</li> </ul> </li> </ul>"},{"location":"toolbox/snyk/3-snyk_support/#external-resources","title":"External resources","text":"<ul> <li>Official documentation</li> <li>Snyk API documentation</li> </ul>"},{"location":"toolbox/snyk/4-vulnerabilities/","title":"Vulnerabilities","text":"<p>When Snyk has identified vulnerabilities in source code, it's time to decide what to do with them. This section will provide some expectations for how to resolve vulnerabilities in Equinor.</p> <p>Looking for guidance on addressing vulnerabilities?</p> <p>Guideline: Interpreting and prioritizing Snyk findings</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#remediation","title":"Remediation","text":"<p>Ultimately it is up to each devOps team to decide how to remediate their vulnerabilities. However, for Equinor to have a total overview of the total security posture of the entire portfolio, we have expectations to how vulnerabilities should be evaluated once they are identified.</p> <p>Snyk uses four severity levels: low, medium, high and critical to evaluate the risk of a particular vulnerability. The expected action depends on the severity of a given vulnerability.</p> Level Description Critical This may allow attackers to access sensitive data and run code on your application High This may allow attackers to access sensitive data in your application Medium Under some conditions, this may allow attackers to access sensitive data on your application Low Application may expose some data that allows vulnerability mapping, which can be used with other vulnerabilities to attack the application"},{"location":"toolbox/snyk/4-vulnerabilities/#critical","title":"Critical","text":"<p>Vulnerabilities should be evaluated and remediated as soon as possible. If a vulnerability is critical, there should be a plan for either fixing or removing the vulnerability, e.g. within 24 hours.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#high","title":"High","text":"<p>High vulnerabilities should be evaluated and remediated as soon as possible. If a vulnerability is high, there should be a plan for either fixing or removing the vulnerability, e.g. within 7 days.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#medium","title":"Medium","text":"<p>Medium vulnerabilities should be evaluated and remediated. If a vulnerability is medium, there should be a plan for either fixing or removing the vulnerability, e.g. within 30 days.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#low","title":"Low","text":"<p>If a vulnerability is low, it should be evaluated to see if a fix is available.</p> <p>Info</p> <p>The timeframes above are not strict and each team needs to decide on their acceptable response times on Snyk issues. </p>"},{"location":"toolbox/snyk/4-vulnerabilities/#priority-score","title":"Priority score","text":"<p>Snyk also provides a priority score from 0-1000 for each vulnerability. This score is based on the CVSS severity score, rechability of the vulnerability and the maturity of the exploit. The priority score is used to prioritize the work of the devOps teams. Note that the priority score may vary from project to project based on wether a fix is available or not.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#ignoring-vulnerabilities","title":"Ignoring vulnerabilities","text":"<p>If the detected vulnerability is not applicable to your project, it can be ignored with a comment explaining why it should be ignored. There can be set a time period for how long an issue should be ignored. This can be handy when one wants to address the issue, but no immediate fix is available, the risk is acceptable and one wants to await the third party dependency to update things at their end.</p> <p>If the vulnerability is in a project not in production it can be tagged with the lifecycle tag \"sandbox\" to exclude it from the aggregated dashboard.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#who-to-contact","title":"Who to contact","text":"<p>Please reach out to the AppSec team on Slack or email at <code>appsec[at]equinor.com</code> if you have any questions regarding evaluating vulnerabilities.</p>"},{"location":"toolbox/snyk/4-vulnerabilities/#further-resources","title":"Further resources","text":"<ul> <li>Snyk severity levels</li> <li>Priority score</li> <li>Guideline: Interpreting and prioritizing Snyk findings</li> </ul>"},{"location":"toolbox/snyk/curriculum/","title":"Curriculum","text":"<ol> <li>Products</li> <li>Integrations</li> <li>Projects</li> <li>Scan Results</li> <li>Advanced Resources</li> <li>Frequently Asked Questions</li> </ol>"},{"location":"toolbox/snyk/curriculum/1-snyk_products/","title":"Products","text":"<p>When you sign up for Snyk, you get access to the following products:</p> <ul> <li>Snyk Open Source (OSS Libraries and Licenses)</li> <li>Snyk Container</li> <li>Snyk Infrastructure As Code</li> <li>Snyk Code (SAST)</li> <li>Snyk Advisor</li> </ul> <p>.. and a ton of integrations!</p>"},{"location":"toolbox/snyk/curriculum/2-integrations/","title":"Integrations","text":"<p>Integrations are merely ways to connect and interact with Snyk. You can find all the supported integrations here.</p>"},{"location":"toolbox/snyk/curriculum/2-integrations/#recommended-integrations","title":"Recommended Integrations","text":""},{"location":"toolbox/snyk/curriculum/2-integrations/#1-github-integration","title":"1. Github Integration","text":"<p>We recommend starting with adding your github repositories. The easiest way to do this is by adding the Github integration. Doing this will create one snyk project for each source file it understands, e.g. <code>requirements.txt</code> or <code>package-lock.json</code>. </p> <p>Configuration settings for this integration can be found here.</p> <p>Please ensure the following:</p> <ul> <li>Automatic fix pull requests<ul> <li>It can be set to either fail only when the PR adds a new dependency issue, or for all issues. </li> <li>It can also be selected if it should fail for high or critical issues, and only if there is a fix available. </li> </ul> </li> <li>Automatic Dependency Upgrade PRs </li> <li>Verify PR checks are configured.</li> </ul>"},{"location":"toolbox/snyk/curriculum/2-integrations/#2-ide-integration","title":"2. IDE Integration","text":"<p>It is recommended to use Snyk IDE plugins while developing applications. This is in addition to the Github integration.</p> <p>The results of a vulnerability scan show issues with context, impact, and fix guidance in your IDE, where the fix for the vulnerability can be done right in the IDE itself.</p> <p>Read more here.</p>"},{"location":"toolbox/snyk/curriculum/3-projects/","title":"Projects","text":""},{"location":"toolbox/snyk/curriculum/3-projects/#import-a-project","title":"Import a Project","text":"<p>Snyk Projects are items that Snyk scans for issues, for example, a manifest file listing your open-source dependencies. When you import a Project, Snyk scans that imported Project, and displays the results for you to review.</p> <p>Check how to import a project here.</p>"},{"location":"toolbox/snyk/curriculum/3-projects/#tagging-snyk-projects-in-equinor","title":"Tagging Snyk Projects in Equinor","text":"<p>We use tagging of Snyk projects to assist us in getting useful metrics. Please make sure that your projects are tagged correctly!</p>"},{"location":"toolbox/snyk/curriculum/3-projects/#tldr","title":"TL;DR","text":"<ul> <li>Omit official scan results for projects from the official Dashboard by setting the \"Lifecycle stage\" tag to \"Sandbox\" (Must be org admin)</li> <li>For OpenSource project, set the project's \"Environment\" tag to \"Distributed\" (you will have to start typing for it to show up on the list)</li> </ul>"},{"location":"toolbox/snyk/curriculum/3-projects/#filtering-noise-from-scanning-results","title":"Filtering \"noise\" from scanning results","text":"<p>Extracts from Snyk projects are imported into an external dashboard. We use information from this Dashboard to help us increase the security posture of our code products and projects. Quite often teams will scan/import projects that should not be part of the official results. This could be scenarios such as testing Snyk, scanning the same code base from multiple angles (CLI, SCM, Container, ++). For each code-base there should be one \"official scanning\". For most teams this will quite often be the SCM (Github integration).</p> <p>The default is that \"all\" projects will be included in the aggregated Dashboard. To omit a project from the aggregated Dashboard change the \"Life Cycle\" tag for your project as follow:</p> <ul> <li>\"Lifecycle Stage\" = \"Sandbox\"</li> </ul> <p>The role Org Admin is required to make a change to the \"Life cycle\" tag.</p>"},{"location":"toolbox/snyk/curriculum/3-projects/#toggling-the-rule-set-for-equinors-opensource-distributed-projects","title":"Toggling the rule-set for Equinor's OpenSource distributed projects","text":"<p>We have configured Snyk to no longer by default alert of potential license issues for projects. If your project is distributed (ex. exposed on the internet, source-code is OpenSource), you should use the tag \"Distributed\" in the Environment section. This will enable the correct rule-set for your project.</p> <p>If you cant see 'Distributed' in the list, try searching for it!</p>"},{"location":"toolbox/snyk/curriculum/4-scan_results/","title":"Scan Results","text":""},{"location":"toolbox/snyk/curriculum/4-scan_results/#view-snyk-scan-results","title":"View Snyk Scan Results","text":"<p>Once you have imported a project, it will be scanned. Learn how to view the scan results here.</p>"},{"location":"toolbox/snyk/curriculum/4-scan_results/#interpreting-and-prioritizing-snyk-findings","title":"Interpreting and Prioritizing Snyk Findings","text":"<p>Tip</p> <p>Addressing all issues in Snyk will make prioritization a breeze. The recommendation is thus to either fix all issues or ignoring them - for a period of time or permanently - to show that the they have been evalutated and addressed.</p> <p>The Snyk Priority Score is a good reference when prioritizing Snyk findings, and should be taken into consideration. Be mindful that Snyk reports on potential vulnerabilities, so you will still need to investigate if the reported issue is a true positive or not.</p> <p>For issues with a fix available, you can trigger Snyk to create a pull-request which addresses the issue. The fix usually involves upgrading the dependency to a vulnerability free version or with a patch. This upgrade might break the code and Snyk will indicate this in the pull-request created. The reviewer is responsible to ensure that the changes in the PR won't cause issues with the project.  </p> <p>In most languages, a minor (1.1.x \u2192 1.2.x) or patch (1.1.1 \u2192 1.1.2) release is considered \u201cnon-breaking\u201d. Whilst a major version (1.x.x \u2192 2.x.x) contains breaking changes.</p> <p>For issues with no fix available it is up to the developers to evaluate how to handle this - whether it be explicitly ignoring the issue until a fix is available, replacing the dependency, or removing the dependency all together as you discover it is not really needed. An important thing here is that an action has been taken and that the issue does not remain \"unhandled\".</p> <p>On a side-note: It is a good practice to define Security Requirements for your applications. In the context of adopting Snyk, it makes a lot of sense to add a requirement covering the how long exposure window is tolerated for your application.</p> <p>Ex.</p> <p>The remediation time of newly discovered vulnerabilities for our application will take no longer than: Critical:   &lt; 7 days High: &lt; 30 days Medium-Low: Resolve based on availability <p>Notifications</p> <p>Set up notifications in Snyk so that you/the team gets notified when new issues are detected, eliminating the need to frequently do a manual check in the portal.</p> <p>For more information, see Snyk's documentation</p>"},{"location":"toolbox/snyk/curriculum/4-scan_results/#interpreting-issues-regarding-licenses","title":"Interpreting Issues regarding Licenses","text":""},{"location":"toolbox/snyk/curriculum/4-scan_results/#intro","title":"Intro","text":"<p>Disabled by default</p> <p>To enable the rule-set that alerts on potential issues, add the \"Distributed\" environment-tag in your projects. If you cant see 'Distributed' in the list, try searching for it</p> <p>Open source software you use in your projects (eg. libraries) are licensed by the author(s) to ensure that it is used the way the author attended. There are many different licenses out there. Some of them are created to ensure the freedom of use without asking anything in return. Others may require that projects using the licensed software adopt the same license and make their software open and free.</p> <p>Information on why/how Snyk reports on License-issues</p> <p>The subject of license-issues is most relevant for Equinor's Open Source Software projects, as obligations to comply is usually triggered by distribution. </p> <p>From the OSLC-handbook:</p> <p>Distribution is defined as: providing software to another entity, i.e., an individual or organization outside your company or organization.</p> <p>Determining the requirements that need to be met to comply with open source licenses involves the following:</p> <ol> <li>You must know what open source software you are using;</li> <li>You must know what license applies to that open source software and the relevant legal interpretation of the license; and</li> <li>You must know how you using that open source software.</li> </ol>"},{"location":"toolbox/snyk/curriculum/4-scan_results/#what-to-do","title":"What to do","text":"<p>We recommend that all teams, regardless of whether they are distributing their solutions or not, acquire a working knowledge of the subject of Open Source Licenses.  </p> <p>You should act when Snyk report on license issues. This will involve investigating the terms of the license in question, and to do the necessary steps to comply.  </p> <p>Sometimes in order to stay compliant, one might have to adopt a new license for your software, replace the open source software, or in some cases ignore it because you find out you are not under obligation to comply.</p> <p>Example</p> <p>This Equinor team maintains an application used by Equinor employees. The source-code is not made available, and the application is only reachable from the internal network.</p> <p>Snyk report the following issue: </p> <p>Investigating the AGPL-3.0 license, looking into the resources linked to at the bottom of this guide, the investigator finds the following useful information:</p> <p>As any distribution of software that is linked to or incorporates AGPL components triggers copyleft, either the entire product must be made available under the AGPL or the product must only be used strictly internally.</p> <p>Since this is the case for their application, they do not trigger the copyleft clause, and this issue can be resolved without further action.</p> <p>What they do next is described bellow.</p>"},{"location":"toolbox/snyk/curriculum/4-scan_results/#what-to-do-after-an-issue-is-resolved","title":"What to do after an issue is resolved","text":"<p>After a license-issue is resolved, a good practice would be to document it in Snyk via the 'ignore' button.</p> <p> </p> <p>If you do need assistance, don't be afraid to reach out on Slack</p>"},{"location":"toolbox/snyk/curriculum/4-scan_results/#more-information","title":"More information","text":"<p>Some useful resources are listed bellow:</p> <ul> <li> <p>Snyk Learn - Open Source Licenses</p> </li> <li> <p>Open Source Licenses Explained</p> </li> <li> <p>Open Source License Compliance Handbook </p> </li> <li> <p>Open Source and Copyleft - How to ensure commercially accepted use</p> </li> </ul> <p>Some examples of compliance failures:</p> <ul> <li>Common Open Source License Compliance Failures</li> <li>IT Professional Network in Equinor's guidelines on choosing an open source license for your project </li> <li>Common Open Source IP Compliance Failures</li> </ul>"},{"location":"toolbox/snyk/curriculum/5-advanced/","title":"Advanced Resources","text":"<ul> <li>Policy file</li> <li>CLI</li> <li>APIs <ul> <li>E.g. API for setting project attributes (metadata such as sandbox) <ul> <li>https://snyk.docs.apiary.io/#reference/projects/project-attributes/applying-attributes</li> </ul> </li> <li>E.g. API to import multiple GH repositories into snyk. There is also sample code available. <ul> <li>https://snyk.docs.apiary.io/#reference/import-projects/import/import-targets</li> </ul> </li> </ul> </li> </ul>"},{"location":"toolbox/snyk/curriculum/6-faq/","title":"Frequently Asked Questions","text":""},{"location":"toolbox/snyk/curriculum/6-faq/#1-where-can-i-get-support-for-snyk","title":"1. Where can I get support for Snyk ?","text":"<p>To get support on Snyk: </p> <ul> <li>#AppSec slack - Try searching through this channel to find useful info!</li> <li>#snyk-equinor-bridge (Monitored by Snyk)</li> <li>Snyk Support (Here you can also check support tickets previously raised by others in Equinor.)</li> </ul> <p>Detailed information available here.</p>"},{"location":"toolbox/snyk/curriculum/6-faq/#2-why-is-snyk-unable-to-process-supported-files","title":"2. Why is Snyk unable to process supported files ?","text":"<p>Here are some discussions around it:</p> <ul> <li>The most likely reason is line endings</li> <li>Or, the file encoding</li> </ul>"},{"location":"toolbox/snyk/curriculum/6-faq/#3-confused-about-how-to-solve-specific-issues-detected-in-snyk","title":"3. Confused about how to solve specific issues detected in Snyk?","text":"<p>Check below some interesting conversations:</p> <ul> <li>Cross site scripting in Flask Api</li> <li>A discussion around path traversal</li> </ul>"},{"location":"toolbox/snyk/curriculum/6-faq/#4-how-would-i-address-vulnerabilities","title":"4. How would I address vulnerabilities ?","text":"<p>Read more about dealing with vulnerabilities here.</p>"},{"location":"toolbox/snyk/curriculum/6-faq/#5-where-can-i-check-the-status-of-snyk-services","title":"5. Where can I check the status of Snyk services ?","text":"<p>The status of snyk services can be checked at https://status.snyk.io.</p>"},{"location":"toolbox/threat-modeling/","title":"Threat Modeling","text":"<p>Threat modeling is often cited as the practice with greatest impact on strengthening teams security posture. In this section of our AppSec pages we present relevant info related to Threat Modeling.</p> <p>If you are thinking of getting started with threat modeling (good call!\ud83d\ude4c) you are welcome to join our workshops ! We are offering physical and virtual workshops on the topic to Equinor DevOps teams and will provide you with the tools needed to get started.</p> <p>Github Repo: https://github.com/equinor/appsec-fundamentals-threatmodeling-101-workshop Slides: https://equinor.github.io/appsec-fundamentals-threatmodeling-101-workshop/#/</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/","title":"About","text":"<p>A full day threat modeling 101 workshop from the Equinor AppSec team</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/#purpose","title":"Purpose","text":"<p>Help teams to build and operate more secure systems by incorporating threat modeling into their daily work.</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/#audience","title":"Audience","text":"<p>Software Development Teams. We prefer to run the 101 workshop for teams, preferably the whole team. We may combine several teams in a workshop. A good size for a workshop is &gt; 10 and &lt; 20.</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/#schedule","title":"Schedule \u23f1","text":"<p>Full day (8 hours, 9 - 16)</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/#context","title":"Context","text":"<p>Threat modeling is often cited as the practice with greatest impact on strengthening teams security posture. Very few teams practice structured threat modelling. In this workshop you will get a basic introduction to threat modeling for a software development project. We do this by working on a sample web project and explore both the software development lifecycle as well as the solution we build. Parts of the content and exercises are experimental. By participating you will be an important part of forming the workshop for our community. Context matters. All models are wrong. Some models are useful. The most important threat modelling is the one you do now! Get started. Just do it :)</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/#workshop-outline","title":"Workshop Outline","text":"<ul> <li>Threat modeling introduction</li> <li>What are we working on?</li> <li>What can go wrong?</li> <li>What are we going to do about it?</li> <li>Did we do a good job?</li> <li>Threat modeling the SDLC</li> <li>Getting started with Threat modeling in your team</li> <li>Wrapping up</li> </ul>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/2-next-steps/","title":"Next steps","text":"<p>After being introduced to threat modeling, we in the AppSec team would very much like to assist you making this a regular effort in the work you do.</p> <p>We offer to partner up for a couple of months, building the muscle-memory and finding out where threat modeling fits into your SDLC.</p>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/2-next-steps/#expectations-to-participating-teams-2-months-perspective","title":"Expectations to participating teams (2 months perspective)","text":"<ul> <li>1 full day physical workshop with whole team</li> <li>1 weekly check-in with team</li> <li>Team set aside weekly effort for threat modeling</li> <li>Key contact is Security Champion</li> </ul>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/2-next-steps/#expectation-to-appsec","title":"Expectation to AppSec","text":"<ul> <li>Provide workshop</li> <li>Be available 4 hours a week to assist</li> </ul>"},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/2-next-steps/#a-crude-draft-of-the-two-month-engagement","title":"A CRUDE draft of the two month engagement","text":""},{"location":"toolbox/threat-modeling/threat-modeling-101-workshop/3-cheat-sheet/","title":"Cheat Sheet","text":""},{"location":"toolbox/tools/pre-commit-faq/","title":"Pre-commit","text":"<p>Pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. In short it allows for a self-maintained list of checks to be performed before any commit.</p>"},{"location":"toolbox/tools/pre-commit-faq/#how-do-i-install-pre-commit","title":"How do I install pre-commit?","text":""},{"location":"toolbox/tools/pre-commit-faq/#prerequisites","title":"Prerequisites","text":"<p>Pre-commit can be installed in two ways, using Python pip or Homebrew.</p>"},{"location":"toolbox/tools/pre-commit-faq/#python","title":"Python","text":"<ul> <li>Verify that pip is installed with <code>pip -V</code>.</li> <li>If it isn't installed download and install a newer version of Python, it should include pip as well.</li> </ul>"},{"location":"toolbox/tools/pre-commit-faq/#homebrew-maclinux","title":"Homebrew (Mac/Linux)","text":"<ul> <li>Verify that brew is installed with <code>brew -v</code></li> <li>If it isn't installed, install using <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code>(As usual, verify all install scripts before executing)</li> <li>Remember to perform the next steps that are shown after install.</li> </ul>"},{"location":"toolbox/tools/pre-commit-faq/#installing-pre-commit","title":"Installing pre-commit","text":"Python Homebrew <code>pip install pre-commit</code> <code>brew install pre-commit</code> <p>Once pre-commit is installed you need to set up the git hook scripts by running <code>pre-commit install</code>. Now pre-commit wil automatically run on git commit!</p>"},{"location":"toolbox/tools/pre-commit-faq/#note-if-pre-commit-is-not-available-after-install-it-might-be-needed-to-manually-add-it-to-path","title":"NOTE: If <code>pre-commit</code> is not available after install, it might be needed to manually add it to PATH.","text":""},{"location":"toolbox/tools/pre-commit-faq/#how-do-i-add-pre-commit-to-my-repository","title":"How do I add pre-commit to my repository?","text":"<ul> <li>Once pre-commit is installed you can add plugins to the <code>.pre-commit-config.yaml</code> file</li> <li>The config file should be added to the root of your project.</li> <li>More guides can be found on the pre-commit website</li> <li>You can also generate a basic configuration using <code>pre-commit sample-config</code></li> </ul>"},{"location":"toolbox/tools/pre-commit-faq/#do-i-need-to-setup-pre-commit-for-each-repository","title":"Do I need to setup pre-commit for each repository?","text":"<p>Yes.</p> <p>Each repository that uses pre-commit needs to have the <code>.pre-commit-config.yaml</code> file.</p>"},{"location":"toolbox/tools/secure-coding/","title":"Secure Code Learning platform","text":"<p>We have a secure coding learning platform. Use this form to sign up (given we have enough licenses; we will reach out if not).</p>"},{"location":"toolbox/tools/secure-coding/#what-can-you-expect","title":"What can you expect?","text":"<ul> <li>Learning about security and secure coding in \"hands on\" sessions in a sandbox environment</li> <li>View video lessons</li> <li>Have fun!</li> <li>Bragging rights</li> <li>Learn things that may help advance your career!</li> </ul> <p>Info</p> <p>You can gain unique merch if you're a Security Champion while using this platform!</p> <p>There is a wide arrangement of subjects, and you can do them all if you wish! So there are tracks for:</p> <ul> <li>AppSec</li> <li>Azure</li> <li>Docker security</li> <li>DevSecOps</li> <li>AI/LLM</li> <li>Data Scientist</li> <li>OWASP Mobile top 10 (ios/android)</li> <li>OWASP API top 10</li> <li>Web App Tester</li> <li>Web dev</li> <li>++</li> </ul>"},{"location":"toolbox/tools/secure-coding/#belts-merch-and-more","title":"Belts, merch and more!","text":"<p>To read more on how we do belts, merch and activities (exclusively for Security Champions), check out the belts and activities section in the Security Champion corner. Spoiler: It's really worth it!</p>"},{"location":"toolbox/tools/sharing-secrets/","title":"Sharing secrets (Yopass)","text":"<p>Yopass is a tool designed to securely share sensitive information, such as passwords and API keys, within our organization. Our internally hosted instance can be accessed here - secrets.equinor.com.</p>"},{"location":"toolbox/tools/sharing-secrets/#tldr","title":"TL;DR","text":"<ul> <li>Use Yopass to securely share sensitive information like passwords or API keys.</li> <li>Always set an appropriate expiration time for secrets.</li> <li>Transmit the Yopass link and decode key via separate, secure channels whenever possible.</li> <li>Verify Yopass links before accessing them.</li> </ul> <p>Weekly Cache Clearance</p> <p>Our hosted instance of Yopass clears its cache every Sunday. Ensure any secrets are accessed within the intended timeframe, as they may be deleted during this routine maintenance.</p>"},{"location":"toolbox/tools/sharing-secrets/#key-risks-yopass-mitigates","title":"Key Risks Yopass Mitigates","text":"<ul> <li> <p>Data interception: By encrypting shared information, Yopass protects secrets from being intercepted during transmission.</p> </li> <li> <p>Credential leakage: Setting expiration times on shared secrets ensures they are only accessible for a limited time, reducing the window for potential leakage.</p> </li> <li> <p>Unintended access: Yopass helps mitigate unauthorized access by enforcing one-time access policies.</p> </li> </ul>"},{"location":"toolbox/tools/sharing-secrets/#secure-sharing-guidelines","title":"Secure Sharing Guidelines","text":"<ol> <li> <p>Protect the Combination of Link and Decode Key</p> <ul> <li>Individually, the Yopass link and decode key are harmless. However, when combined, they grant access to the secret and should collectively be handled with the same level of confidentiality as the secret itself.</li> </ul> </li> <li> <p>Transmit Link and Decode Key Separately</p> <ul> <li>Whenever possible, send the Yopass link and the decode key via separate communication channels to minimize the risk of unauthorized access.<ul> <li>Example: Send the link via email and the decode key via a direct message on teams.</li> </ul> </li> </ul> </li> <li> <p>Use Secure Communication Channels</p> <ul> <li> <p>Share the Yopass link and decode key through secure channels (e.g. email, secure messaging apps).</p> </li> <li> <p>Avoid using public or unsecured networks to transmit sensitive information.</p> </li> </ul> </li> <li> <p>Limit the Expiration Period</p> <ul> <li> <p>Set an appropriate expiration time when sharing a secret. This limits the exposure window and ensures secrets are available only for the required duration.</p> </li> <li> <p>Use the one-time retrieval feature to ensure the secret can only be accessed once.</p> </li> </ul> </li> <li> <p>Password Policies</p> <ul> <li>Secrets shared via Yopass should comply with internal security policies and should not be reused across services.</li> </ul> </li> <li> <p>Link Verification</p> <ul> <li>Verify Yopass links before accessing them to ensure they originate from trusted sources.</li> </ul> </li> <li> <p>Use Yopass for Temporary Sharing</p> <ul> <li>Avoid using Yopass for long-term secrets. If the secret is expected to be in use for an extended period, consider other methods such as managed secrets vaults.</li> </ul> </li> </ol> <p>Exceptions and Practical Considerations</p> <p>In scenarios where sending both the link and decode key together is necessary (e.g., time-sensitive situations or recipient limitations), ensure that:</p> <ul> <li>A secure communication channel is used.</li> <li>The recipient is instructed to access the secret promptly.</li> </ul>"},{"location":"toolbox/version-control/gh-actions-runners/","title":"GitHub Actions and Self-Hosted Runners","text":"<p>The scope of this guideline is to provide generic security advice for GitHub Actions and specific security advice for using self-hosted runners.</p> <p>(To have a holistic view on security and threats in a system, we recommend that teams have a Threat Model for their Software Development Lifecycle. More informaton on threat modeling can be found here)</p>"},{"location":"toolbox/version-control/gh-actions-runners/#github-actions-in-general","title":"GitHub Actions in General","text":"<p>When using GitHub Actions, it is good practice to:</p> <ul> <li>Investigate and familiarize yourself with the Security Guides provided by GitHub and take appropriate actions.</li> <li>Investigate and align on repository configuration (repository settings)<ul> <li>Actions -&gt; General<ul> <li>Action permissions<ul> <li>If you don't use GitHub Actions, set this to \"Disable actions\" </li> <li>If you want to use GitHub Actions, set this to \"Allow enterprise, and select non-enterprise, actions and reusable workflows\"</li> <li>You can check \"Allow actions created by GitHub\"</li> <li>Add the specific actions you are going to use into the \"Allow specified actions and reusable workflows\" section</li> </ul> </li> <li>Fork pull request workflows from outside collaborators (public repos)<ul> <li>The default should be \"Require approval for all outside collaborators\"</li> </ul> </li> <li>Fork pull request workflows (non-public repos)<ul> <li>\"Run workflows from fork pull requests\" should not be checked. Change only if you have a good understanding of the risks involved.</li> </ul> </li> </ul> </li> </ul> </li> <li>All external actions that you plan to use should be examined/audited. This could include examining the repos and using services like StepSecurity's Action Advisor.</li> <li>Pin actions to the full length commit-hash (example \"uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1\"). You can pin to a tag (version) if you trust the creator (Example: \"uses: actions/checkout@v4.1.1\")</li> <li>Use OpenID Connect for access to Azure Resources (Configuring OpenID Connect in Azure, MS Workload Identity Federation)</li> <li>Manage secrets securely; they should only be available to workflows and branches where needed<ul> <li>Use environments to protect code and secrets Github Doc</li> <li>Investigate Using secrets in GitHub Actions</li> <li>If available, consider using managed identity/OIDC and Azure Key Vaults for secrets.</li> </ul> </li> <li>Limit the permissions/scope of all tokens/credentials, especially the GITHUB_TOKEN.</li> <li>Only refer to values that you control in an action (think risks related to non-validated input).</li> <li>Use branch protection for your repository (workflows should be treated as \"sensitive\", use branch protection and careful review for any changes).</li> </ul>"},{"location":"toolbox/version-control/gh-actions-runners/#using-self-hosted-runners","title":"Using Self-Hosted Runners","text":"<p>When using GitHub Actions with self-hosted runners, it is good practice to:</p> <ul> <li>Investigate and familiarize yourself with the Hosting your own runners documentation.</li> <li>Investigate and familiarize yourself with the Hardening for self-hosted runners.</li> <li>NEVER use with public repos.</li> <li>Involve the team, create, and keep up to date a threat model of your self-hosted runner setup. The threat model should at least include:<ul> <li>A data flow/architecture diagram including key components and code/information flows.</li> <li>A list of identified threats/risks.</li> <li>Information on how identified threats/risks are managed.</li> <li>The threat model should be accepted by product owners/risk owners.</li> </ul> </li> <li>For the hosting environment:<ul> <li>We prefer ephemeral environments, non-persistent environments.</li> <li>Just-in-time runners may be an option.</li> <li>Use dedicated hosts/machines.</li> <li>Only do one job at a time on the runner (don't do auto-scaling with persistent runners, use the --ephemeral flag).</li> <li>Follow hardening guidelines for the hosting platform (if they exist).</li> <li>The environment should be isolated by default.</li> <li>Network egress/ingress should be managed (firewall, NSG rules, ++).</li> <li>The runner code should execute with the least possible privilege level.</li> <li>Environments should be refreshed regularly (update, patch) (weekly).</li> <li>The GitHub runner software should be on auto-update (which is default unless disabled).</li> <li>Each job should do a proper clean-up!</li> </ul> </li> <li>Have routines and practices for monitoring/examining run/runner logs.</li> </ul>"},{"location":"toolbox/version-control/gh-actions-runners/#the-future-the-gh-roadmap","title":"The Future, The GH Roadmap","text":"<ul> <li>We are exploring company-provided runners (organization, enterprise).</li> <li>Using Azure Virtual Networks with GitHub hosted runners may be an option in the future (link).</li> <li>The GitHub Public Roadmap is evolving.</li> </ul>"},{"location":"toolbox/version-control/gh-actions-runners/#external-3rd-party-resources","title":"External 3rd Party Resources","text":"<ul> <li>GitGuardian, GitHub Actions Security Cheat Sheet</li> </ul>"},{"location":"toolbox/version-control/git-github/","title":"Git and Github","text":"<p>This guideline contains some basic information on configuration of Git and user profiles on github.com. Our perspective would be security and privacy. The guideline is by no means exhaustive, it's more an introduction to basic config and the correlation between Git and github.com</p> <p>Git vs Github.com</p> <p>Git is a distributed version control system for tracking changes in source code, while GitHub is a platform that hosts Git repositories online. GitHub builds upon Git, offering a centralized place for developers to share and work on code together.</p> <p>The SCM Policy</p> <p>The Equinor Developer Portal contains our Source Code Management System Policy. Please make sure you are familiar with the content.</p>"},{"location":"toolbox/version-control/git-github/#tldr","title":"TLDR;","text":"<ul> <li>Configure your local Git with proper name and email. Use your full name with the profile. Use privacy options for hiding your github.com primary email.</li> <li>For authentication and communication with github.com, use Git with SSH and passphrase protected private keys.</li> <li>Use separate SSH keys for different client devices.</li> <li>Book a yearly reccurring event with yourself to rotate SSH keys.</li> </ul>"},{"location":"toolbox/version-control/git-github/#git","title":"Git","text":"<p>For this guideline we use Git from the command line. Be aware, there are many tools that hide the internal mechanics of Git within the tool. For these tools most settings are defined within the tool itself.</p> <p>We assume that <code>git</code> and <code>ssh</code> are installed on your system. We do not cover the installation process besides mentioning the fact that git and ssh like any other piece of software must be kept up-to-date.</p> <p>The official Git documentation is a good source for authoritative answers and deep dives.</p>"},{"location":"toolbox/version-control/git-github/#how-git-manages-config","title":"How Git manages config","text":"<p>Git is dependent on proper configuration to work. Configuration can be read from the command line (using the <code>-c</code> option), environment variables or files. The official guide provides the details. </p> <p>We usually store Git config in files. Git will read config from multiple locations depending on their availability. The files are read in the order shown below, the <code>last value read</code> will take precedence over values read earlier.</p> <ol> <li>System config (usually <code>/etc/gitconfig</code>)</li> <li>Config file in home directory (usually <code>$HOME/.gitconfig</code>)</li> <li>Repository config files (<code>$GITDIR/config</code>)</li> </ol> <p>The config files can be updated manually with a text editor or by using Git</p> <p>Git configuration from the command line follow the following structure:</p> <pre><code>git config options section.key value\n</code></pre> <p>For the examples below no \"scope\" is provided so Git will expect that you are in a Git directory and then work with a repo config file. A error message will be given if this is not the case. Use the parameter <code>--system</code>, <code>--global</code> or <code>--local</code> to specify scope.</p> <p>Example; setting the user name:</p> <pre><code>git config user.name \"Peter Pan\"\n</code></pre> <p>Reading the config looks like this:</p> <pre><code>git config --get user.name\nPeter Pan\n</code></pre> <p>Removing config looks like this:</p> <pre><code>git config --unset user.name\n</code></pre> <p>Setting your user name for a global scope would look like this:</p> <pre><code>git config --global user.name \"Peter Pan\"\n</code></pre> <p>Tip</p> <p>Using the command <code>git config --list --show-origin</code> will expand all git config across the different levels.</p>"},{"location":"toolbox/version-control/git-github/#recommended-generic-basic-config","title":"Recommended generic basic config","text":"<p>This section contains the recommended basic generic configuration for Git.</p> <pre><code>git config --global user.name \"value\"\ngit config --global user.email \"value\"\n</code></pre> <ul> <li>The value for username should be your full name (SCM Policy)</li> <li>The value for user email should be the \"Not visible in emails\" value from your github.com account. The format will usually be <code>ID+USERNAME@users.noreply.github.com</code> (Privacy, Official Github documentation)</li> </ul> <p>Additional email privacy</p> <p>We also recommend that you check the \"Keep my email address private\" and even \"Block command line pushes that expose my email\" in email section of your profile on github.com</p>"},{"location":"toolbox/version-control/git-github/#using-ssh-with-git","title":"Using SSH with git","text":"<p>Git uses HTTP or SSH to communicate with github.com. Both alternatives are viable and provide a good level of security. HTTP(S) assumes the usage of PAT (Personal Access Token) tokens rather than account passwords. A short threat model of the options contains the following sections:</p> Threat SSH (with password-protected keys) HTTPS (with PATs) Interception Encrypted; MITM attack needed. Passphrases protect keys on disk, but not in transit since keys aren't transmitted. Encrypted; susceptible to MITM, but TLS and certificate validation mitigate risks. PATs are used instead of passwords. Impersonation Theft of private key and passphrase required for impersonation. Relies on secure storage of PATs. Impersonation possible if a PAT is exposed. Eavesdropping Encrypted traffic; passphrase adds security at rest, not in transit. Encrypted traffic; PATs should be securely stored to prevent unauthorized access. Authentication Strong, with added layer of passphrase protection for key files. PATs can be set to expire, enhancing security by limiting the lifespan of access credentials. Configuration Requires management of key pairs and passphrases, slightly more complex. Requires management of PATs, including regular rotation and setting appropriate expiration dates. Availability Direct; less prone to web attacks, but firewalls might block SSH. High through standard web ports; PATs can be revoked or expire, requiring renewal for continued access. Key/Token Expiry SSH keys do not expire by default; requires manual rotation for security. PATs can be configured to expire, forcing regular renewal and review of access permissions. Theft of Credentials Risk mitigated by passphrase encryption of the private key. Physical access or malware required to steal. Risk of PAT exposure, especially if stored insecurely or transmitted over insecure channels. Least privilege SSH keys inherit all permissions of a user. No granularity PAT tokens can be configured for fine grained permissions and then provide access to all or only specific repos. This could strengthen security. Token management will add extra complexity. <p>Use SSH with Git</p> <p>We recommend using SSH when Git authenticates and communicates with github.com. Private keys should be passphrase protected</p>"},{"location":"toolbox/version-control/git-github/#configuring-git-to-use-ssh","title":"Configuring Git to use SSH","text":"<p>The Connecting to GitHub with SSH in the official Github documentation is a good source for detailed information.</p> <p>The following sections of the guideline contains the usual steps to get started with SSH.</p>"},{"location":"toolbox/version-control/git-github/#generate-a-new-ssh-key","title":"Generate a new SSH key","text":"<ul> <li>Type of key should be <code>ed25519</code></li> <li>Specify a filename (<code>-f</code>). We assume you can have multiple keys and suggest a naming convention like \"service\"-\"identity\"-\"index\". The index could be creation date and then used for automating key rotation.</li> <li>Add a comment (<code>-C</code>) to help identify the key's purpose. This will be added to the public key as generic text but will not have any functional impact. It will not be exposed on github.com. However, the purpose of a public key is to \"share it\", so use with caution (PII).</li> </ul> <p>Example; Creating a SSH key for the Github user <code>larskaare</code></p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/github_larskaare_1 -C \"Github SSH auth key for machine 1\"\n</code></pre> <p>You will be asked \"Enter passphrase (empty for no passphrase)\", we strongly recommend using a passphrase!. Two files are created, one named <code>github_larskaare_1</code> and one named <code>github_larskaare_1.pub</code>. The file with the <code>.pub</code> extension contains the public part of the key. The file <code>github_larskaare_1</code> contains the private part of the key which should be protected and never shared.</p> <p>Re-using keys?</p> <p>We advice on creating separate SSH keys for separate machines and devices and not to re-use the same key on them all. This is good security practice in case of compromise - don't have one key to the whole kingdom. A more fine grained approach will also be good when keys are to be revoked or updated. You could also consider using different keys for professional versus personal usage.</p> <p>Passphrases</p> <p>Store passphrases in a password manager.</p>"},{"location":"toolbox/version-control/git-github/#configure-ssh-and-adding-the-key-to-the-key-agent","title":"Configure SSH and adding the key to the key-agent","text":"<p>Adding the generated SSH key to the <code>ssh-agent</code> gives you a secure repository for your private keys's passphrases. Adding keys and passphrases to the key agent eliminates the need to repeatedly enter the passphrase.</p> <p>Follow the official documentation of and add the SSH key to the ssh-agent. Be aware of the operating system selector at the top of the page - it will give you instructions for Mac, Windows and Linux. The sections below covers a minimal set-up of how to add the SSH key to the agent. The official version has more details - you can follow either. </p>"},{"location":"toolbox/version-control/git-github/#adding-ssh-config","title":"Adding SSH config","text":"<p>SSH uses a config file for it's configuration (this file is not used by Git). The user-specific file is usually stored in <code>~/.ssh/config</code> and should be updated prior to using the SSH key and the ssh-key agent. Consult the documentation of your SSH client for details. (Many use OpenSSH which have good manual pages - OpenSSH Manual Pages)</p> <p>A SSH config file with minimum set-up usually looks like this:</p> <pre><code>Host github.com\n    AddKeysToAgent yes\n    IdentitiesOnly=yes\n    IdentityFile ~/.ssh/github_larskaare_1\n</code></pre>"},{"location":"toolbox/version-control/git-github/#adding-the-private-ssh-key-to-the-ssh-agent","title":"Adding the private SSH key to the SSH agent","text":"<p>We assume that the <code>ssh-agent</code> is available and running.</p> <p>The following command will add the private part of the SSH key we generated to the ssh-agent</p> <pre><code>ssh-add ~/.ssh/github_larskaare_1\n</code></pre> <p>For MacOS we would typically add the passphrase to the keychain as well</p> <pre><code>ssh-add --apple-use-keychain ~/.ssh/github_larskaare_1\n</code></pre>"},{"location":"toolbox/version-control/git-github/#configure-githubcom-to-use-our-ssh-key","title":"Configure github.com to use our SSH key","text":"<p>We now have a SSH key that we can use when communicating with github.com. To be able to use this key with Github we need to upload the public part of the key to github.com</p> <ul> <li>Print the public key</li> </ul> <pre><code>cat ~/.ssh/github_larskaare_1.pub\n</code></pre> <ul> <li> <p>Copy the public key (algorithm and key) and add it as a new SSH Authentication key to your Github profile at https://github.com/settings/keys</p> </li> <li> <p>Verify that Github accepts the key, test the connection</p> </li> </ul> <p>(When testing the connection to github.com, ssh will ask if the fingerprint of the SSH key presented by github.com is ok and if you would like to continue. If you are connecting to github.com answer \"yes\". Understanding this trust chain is not for this guide - but if you want to validate the fingerprint that's suggested you can correlate it to the official ssh key fingerprints. The known hosts file that is mentioned is the <code>~/.ssh/known_hosts</code> file)</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>The command should a message similar to this to indicate success:</p> <pre><code>Hi larskaare! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>"},{"location":"toolbox/version-control/git-github/#using-git-and-ssh-with-github","title":"Using Git and SSH with github","text":"<p>A this stage we have SSH all configured on both ends. However, how do we tell git to use SSH? You typically would do this when cloning a repo or configuring the <code>remote</code></p> <ul> <li>A git clone command like this <code>git clone git@github.com:equinor/appsec.git</code> tells git to use SSH. The same command for using HTTPS would be git <code>git clone https://github.com/equinor/appsec.git</code>. The giveaway for HTTPS would be the url which starts with https \ud83d\ude05 That is not included when we use SSH - we rather have the <code>git@github.com</code> part of the url.</li> <li>You can examine the remote of a repo to identify if it uses SSH or HTTPS</li> </ul> <pre><code>git remote -v\n</code></pre> <p>should out output remote name and a URI containing the <code>git@github.com</code></p> <pre><code>origin  git@github.com:equinor/appsec.git (fetch)\norigin  git@github.com:equinor/appsec.git (push)\n</code></pre> <ul> <li>You can add and change remotes for a cloned repo, from HTTPS to SSH using the command <code>git remote set-url &lt;remote name&gt; &lt;new uri&gt;</code></li> </ul>"},{"location":"toolbox/version-control/git-github/#configure-the-ssh-key-for-usage-with-equinors-sso-protected-resources","title":"Configure the SSH key for usage with Equinor's SSO protected resources","text":"<p>The Equinor organization on github.com is protected behind SSO login. In order for your SSH key to be used with resources in the Github \"Equinor\" or \"Equinor-Playground\" organizations you need to authorize the key for these permissions on your behalf. Github documentation gives you all the details.</p> <ul> <li>To authorize your key head over to your SSH Key Settings on your profile on Github, select the key in question, select \"Configure SSO\" and authorize against organisation(s).</li> </ul>"},{"location":"toolbox/version-control/git-github/#rotating-ssh-keys","title":"Rotating SSH keys","text":"<p>Rotate your SSH keys</p> <p>Your SSH keys, and passphrases, should be rotated at least on a yearly basis. Put an re-occurring appointment in your calender for this. This process could be automated, but doing it once in a while in manual mode may help you not to forget how things work.</p>"},{"location":"toolbox/version-control/git-github/#githubcom","title":"Github.com","text":""},{"location":"toolbox/version-control/git-github/#basic-config-for-your-account","title":"Basic config for your account","text":"<p>You will find your Github settings at https://github.com/settings/profile.</p> <p>We recommend the following settings:</p>"},{"location":"toolbox/version-control/git-github/#public-profile","title":"Public profile","text":"<ul> <li>Use your full name</li> <li>Select an recognizable avatar/picture for profile picture</li> </ul>"},{"location":"toolbox/version-control/git-github/#emails","title":"Emails","text":"<ul> <li>Have a primary and a secondary email address registered</li> <li>Select \"Keep my email addresses private\"</li> <li>Select \"Block command line pushed that expose my email\"</li> </ul>"},{"location":"toolbox/version-control/git-github/#password-and-authentication","title":"Password and authentication","text":"<ul> <li>Enable Two-Factor authentication<ul> <li>This is not the Two-Factor for your Equinor account, this is for your account at github.com</li> </ul> </li> <li>Enable multiple Two-Factor methods<ul> <li>Authenticator App</li> <li>SMS/Text</li> </ul> </li> <li>Preferred 2FA method should be Authenticator app</li> <li>(Experiment with PassKeys or Security Keys)</li> <li>Extract \"Recovery codes\" and store in your password manager</li> </ul>"},{"location":"toolbox/version-control/git-github/#codespaces","title":"Codespaces","text":"<ul> <li>Validate the \"Editor preference\"<ul> <li>\"Visual Studio Code for the Web\" is a good option for many</li> </ul> </li> <li>Validate \"Default retention period\"<ul> <li>14 days may be a good period (Codespaces incurs storage charges)</li> </ul> </li> <li>Region<ul> <li>Set manually to \"Europe West\"</li> </ul> </li> <li>For signing commits from a codespace, see our guideline on Signed Commits</li> </ul>"},{"location":"toolbox/version-control/git-github/#code-security-an-analysis","title":"Code security an analysis","text":"<ul> <li>\"Push protection for yourself\" should be enabled<ul> <li>Block push with supported secrets against public repos</li> </ul> </li> </ul>"},{"location":"toolbox/version-control/git-github/#applications","title":"Applications","text":"<ul> <li>On a regular basis (at least once a year) - review apps that you have authorised to act on your behalf</li> <li>Github Apps<ul> <li>Limit access to specific repos</li> <li>Uninstall apps that not are in use</li> </ul> </li> <li>Authorized OAuth Apps<ul> <li>Review permissions</li> <li>Review organization access</li> <li>Revoke access if not in use</li> </ul> </li> </ul>"},{"location":"toolbox/version-control/git-github/#security-log","title":"Security log","text":"<ul> <li>Familiarize with the content of the security log</li> </ul>"},{"location":"toolbox/version-control/git-github/#developer-settings","title":"Developer settings","text":"<ul> <li>Review Personal access tokens (PAT)<ul> <li>Review scope</li> <li>Review organizational access</li> <li>Review repository access (fine grained)</li> <li>Review permissions (fine grained)</li> <li>Rotate token (maximum token life time should be 12 months)</li> <li>Delete if not in use</li> </ul> </li> </ul>"},{"location":"toolbox/version-control/git-github/#whats-next","title":"What's next","text":"<p>If you have reached this far - the next natural steps would be to continue the journey with getting your git commits signed</p>"},{"location":"toolbox/version-control/git-github/#external-resources","title":"External resources","text":"<ul> <li>Git downloads</li> <li>The Github Cli can be used as a credential helper for git.</li> </ul>"},{"location":"toolbox/version-control/git-signed-commits/","title":"Signed commits","text":"<p>The code from our software configuration management system (SCM) is the starting point for a lot of secure coding practices. Signed Git commits are an essential security practice which provides a layer of verification that helps mitigate several threats. Some of these threats are:</p> <ul> <li> <p>Impersonation: Signed commits use keys to sign the work. By doing so, they certify that the commit was made by the claimed individual. This helps prevent an attacker from impersonating a developer and submitting malicious code.</p> </li> <li> <p>Code tampering: Signing commits ensures the integrity of the code from the time it was committed. If the code is altered in any way after it was signed, the signature will no longer be valid. This helps protect against unauthorized code modifications, which could introduce vulnerabilities or malicious code.</p> </li> <li> <p>Replay attacks: Signed commits can help mitigate replay attacks where an attacker attempts to re-submit a legitimate commit to a different context, potentially causing unintended consequences. The signature verifies not just the content of the commit but also its context within the repository history.</p> </li> <li> <p>Long-term repository integrity: By using signed commits, organizations can ensure the long-term integrity of their codebase. This is crucial for auditing and tracking the provenance of code changes, making it easier to trace back and verify the authenticity of commits over time.</p> </li> <li> <p>Increased trust and compliance: For projects that require strict compliance and governance standards, signed commits provide a mechanism to enforce such policies. They increase trust among contributors and users by ensuring that all changes are authenticated and authorized by the rightful committers.</p> </li> </ul>"},{"location":"toolbox/version-control/git-signed-commits/#tldr","title":"TLDR;","text":"<ul> <li>Sign all your Git commits</li> <li>Use SSH, with a passphrase protected private key, to sign your Git commits</li> <li>Use separate SSH keys for signing and authentication</li> <li>Use branch protection and required signed Git commits</li> <li>GitHub Codespaces sign commits for you, but be aware of a few caveats</li> </ul>"},{"location":"toolbox/version-control/git-signed-commits/#signing-methods","title":"Signing methods","text":"<p>The official GitHub documentation on signature verification shows that commits can be signed using GPG, SSH or S/MIME. The 3 different methods have their pros and cons.</p> Feature/Aspect SSH Signing GPG Signing S/MIME Signing Basic Mechanism Uses SSH keys for both authentication and signing. Utilizes a public-private key pair specifically for signing. Uses certificates issued by a Certificate Authority (CA). Identity Verification SSH public keys are used to verify the signature. Verification is based on a web of trust or direct key sharing. Relies on certificates verified and issued by trusted CAs. Infrastructure Requires SSH key setup; already needed for repository access. Requires GPG software and management of key pairs. Requires obtaining and managing a certificate from a CA. Potential complex PKI Ease of Setup Simple for users already using SSH keys for Git operations. Can be complex due to key generation, management, and sharing. Varies; obtaining a certificate can be straightforward or complex depending on the provider. Cross-platform Support Broad support across various platforms and Git tools. Well-supported, with widespread integration in Git tools. Support varies; some tools may not support S/MIME directly. Pros - Simplifies workflow by using the same keys for authentication and signing\u2020.  - Integrated into SSH, which is commonly used for secure Git operations. - Decentralized and flexible, with a variety of algorithms and key sizes.  - Well-established in the open-source community. - Trust model is straightforward, based on established CAs.  - May align with existing certificate-based security practices (e.g., email). Cons - Primarily verifies the commit was pushed by an authenticated user, not necessarily the commit's author.  - SSH key management is crucial; compromised keys pose a risk. - Key management and the web of trust model can be complex.  - Requires active key maintenance (revocation, expiration). - Dependent on third-party CAs for issuance and trust.  - Certificates have expiration dates and may incur costs. <p>\u2020 while reusing the SSH key is a recognized advantage of SSH signing, we recommend against this practice, see below.</p> <p>Note</p> <p>We recommend using self-signed SSH keys for signing your git commits (In the future we may switch to a certificate based approach)</p>"},{"location":"toolbox/version-control/git-signed-commits/#configure-your-local-development-environment","title":"Configure your local development environment","text":"<p>For this guideline our reference is using Git from the command line. </p> <p>We assume that Git and SSH is installed on your system. </p> <p>We assume that you are using SSH to authenticate Git with github.com. Consult our guideline for more information on this topic.</p> <p>The GitHub documentation on SSH commit signature verification is a good source for detailed information.</p>"},{"location":"toolbox/version-control/git-signed-commits/#adding-a-ssh-key-for-signing","title":"Adding a SSH key for signing","text":"<p>Note</p> <p>We recommend using different SSH keys for authentication and signing. This may add some extra complexity and it may provide a more robust set-up with looser coupling of key components of the SDLC.</p> <p>To create a new SSH key for signing you can use the following command (alter the date manually):</p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/git_ssh_signing_key_1 -C \"Created on &lt;date&gt;, for larskaare on github.com\"\n</code></pre> <p>This will create a SSH signing key and add a comment on date and purpose. Add a passphrase to the key. Success full key generation will output the key fingerprint and a randomart image (randomart is supposed to be a visualisation making it easier to validate keys - and identify changes)(You can also find more info on SSH keys on our git guideline)</p> <p>Add the new key to the ssh-agent</p> <pre><code>ssh-add ~/.ssh/git_ssh_signing_key_1\n</code></pre>"},{"location":"toolbox/version-control/git-signed-commits/#configure-git-to-use-the-ssh-key","title":"Configure git to use the SSH key","text":"<p>We will configure the git global settings to use the new SSH key for signing commits locally. Examples assume you created the key as defined above.</p> <pre><code>git config --global gpg.format ssh\ngit config --global user.signingkey ~/.ssh/git_ssh_signing_key_1.pub\ngit config --global commit.gpgsign true\n</code></pre> <p>These lines will tell git to use SSH for signing commit, tell git where to find the key that should be used and then tell git to always sign commits. If you do not add this last line you will specifically have to add the <code>-S</code> parameter for each commit you can to sign.</p> <p>More information on this step can be found in the GitHub documentation</p>"},{"location":"toolbox/version-control/git-signed-commits/#examining-the-git-log","title":"Examining the git log","text":"<p>To verify that commits are signed locally you can use the following command:</p> <pre><code>git log --show-signature\n</code></pre> <p>When you run this command on a newly configured system you may get an error message like <code>error: gpg.ssh.allowedSignersFile needs to be configured and exist for ssh signature verification</code>. This error will easily be overlooked in the wall of text from the log. In order for git to verify signatures locally you need to add the public keys that are used to sign to a file that Git will use.</p> <p>We will create the allowed_signers file. It typically has the format like \"signer email\" \"key-type\" \"key-body\". The key in question is the public key of the SSH key we use to sign our commits.</p> <pre><code>git config --global gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers\necho $(git config --get user.email) \\\n     $(cat ~/.ssh/git_ssh_signing_key_1.pub) \\\n     | awk '{print $1,$2,$3}' &gt;&gt; ~/.ssh/allowed_signers\n</code></pre> <ul> <li>The first line tells Git which file we are going to use for allowed_signers</li> <li>The second line emits the information on our key and adds it to the allowed_signers file. The file is created if it does not exist</li> </ul> <p>When this is done you can view the git log and verify the signature.</p> <pre><code>git log --show-signature\n</code></pre> <p>The <code>git verify-commit</code> options is also available. To verify the commit on HEAD you can use the following command:</p> <pre><code>git verify-commit HEAD\n</code></pre> <p>Use the verbose parameter to get more information:</p> <pre><code>git verify-commit -v HEAD\n</code></pre> <p>Tip</p> <p>You may have noticed that your local git only will show a good signature for your own signed commits. For your local git to show a good signature for other contributing team members you will have to add their public key to your local allowed_signers file. The status on github.com will be correct as it hopefully knows the public keys for the signers.</p> <p>Tip</p> <p>We have shown how to sign git commits. You can also sign git tags!</p>"},{"location":"toolbox/version-control/git-signed-commits/#configure-github","title":"Configure Github","text":"<p>At this stage in the guideline we are able to sign and verify the signature of locally committed changes. If you push your changes to github.com they will get the <code>Unverified</code> status. This indicate that Github has found a signature in the commit but it is not able to verify it. You can find more detailed information on the Github docs on About commit signature verification</p> <p>This makes sense. Github can not verify our signature, it does not have our public key. Telling Github about the public key we used to sign our commit is the next step.</p>"},{"location":"toolbox/version-control/git-signed-commits/#adding-public-keys","title":"Adding public keys","text":"<p>We will add the public part of our SSH key to github.com.</p> <ul> <li>Print the public part of the key</li> </ul> <pre><code>cat ~/.ssh/git_ssh_signing_key_1.pub\n</code></pre> <ul> <li>Copy the public key and add it as a new Signing key to your profile on github.com. Provide a proper title. Key type must be \"Signing Key\".</li> </ul> <p>If you now go back and look at the commits on github.com, those that were signed with the new key should have status <code>Verified</code></p> <p>If you select the <code>Verified</code> badge you will get information on the signer and the fingerprint of the public key that was used. You can find the finger print by looking at the key on your Github profile or by running ssh-keygen with the option to generate fingerprint locally:</p> <pre><code>ssh-keygen -lf ~/.ssh/git_ssh_signing_key_1\n</code></pre> <p>Tip</p> <p>Explore Github's Vigilant Mode It should increase the trust level of signed commits yet another level.</p>"},{"location":"toolbox/version-control/git-signed-commits/#enforce-signed-commits-via-branch-protection","title":"Enforce signed commits via Branch protection","text":"<p>We recommend that you protect important branches with branch protection rules on. This is a feature of Github that requires a Github Team or Github enterprise account.</p> <p>The official documentation can be found in Managing protected branches</p> <p>We recommend the following minimum protection for important branches:</p> <ul> <li>Protect matching branches<ul> <li>Check \"Require a pull request before merging\" </li> <li>Check \"Require signed commits\"</li> <li>Check \"Do not allow bypassing the above settings\"</li> </ul> </li> <li>Rules applied to everyone including administrators<ul> <li>UnCheck \"Allow force pushes\"</li> <li>UnCheck \"Allow deletions\"</li> </ul> </li> </ul>"},{"location":"toolbox/version-control/git-signed-commits/#signing-on-github-codespaces","title":"Signing on GitHub Codespaces","text":"<p>GitHub Codespaces can take care of setting up GPG signing keys inside the codespace on your behalf. It is trivial to set it up, but it has some security implications, so do this exclusively for repositories you trust. </p> <p>If you trust the repository (and its maintainers), signing in Codespaces can be enabled by following these steps: - Open the Codespaces settings on GitHub - Enable \"GPG Verification\" - Choose <code>Selected Repositories</code> in the \"Trusted Repositories\" section, and add the relevant repository</p> <p>See also the official GitHub Documentation</p> <p>If you cannot trust the content or the maintainers of a repository (eg, if you are contributing to a project owned by another company, or to an open source projects) and you want/need to sign your commits, it is better to use a local development setup rather than GitHub Codespaces. The problem is that the codespace could have been configured to run malicious code. That code could syphon the GPG signing keys that GitHub would automatically drop into the environment (and all other sorts of sensitive data you enter in the codespace). For more details, see here.</p>"},{"location":"toolbox/version-control/git-signed-commits/#external-resources","title":"External resources","text":"<ul> <li>We disagree with the premise of signed git commits not being useful in the Should We Sign Git Commits? Probably Not!. Using git signatures are useful, but it's a not a silver bullet. The article contains relevant reflections advocating for focusing on building a foundation of trust through the review and approval of pull requests by multiple trusted individuals and the importance of a collective scrutiny process. This we fully support</li> <li>We are monitoring the Git Sign project of Sigstore. It contains a very interesting approach to the trust chain.</li> </ul>"}]}